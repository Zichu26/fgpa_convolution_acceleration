-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_160_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    channels : IN STD_LOGIC_VECTOR (31 downto 0);
    window_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_1_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_2_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_9_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_10_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_11_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_18_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_19_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_20_load : IN STD_LOGIC_VECTOR (7 downto 0);
    window_3_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_4_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_5_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_12_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_13_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_14_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_21_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_22_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_23_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_6_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_7_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_8_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_15_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_16_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_17_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_24_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_25_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_26_load_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_case_014216_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_032243_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_097270_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_116225_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_134252_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_199279_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_218234_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_236261_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_2101288_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_divisor : IN STD_LOGIC_VECTOR (31 downto 0);
    output_pixel_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_pixel_2_out_ap_vld : OUT STD_LOGIC;
    output_pixel_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_pixel_1_out_ap_vld : OUT STD_LOGIC;
    output_pixel_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_pixel_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_160_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln160_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_reg_1138 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter26_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter27_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter28_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter29_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter30_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter31_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter32_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter33_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter34_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter35_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter36_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter37_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter38_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter39_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter40_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter41_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter42_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter43_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter44_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter45_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter46_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter47_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter48_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter49_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter50_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter51_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter52_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter53_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter54_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter55_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter56_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_1138_pp0_iter57_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln160_reg_1150 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1150_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_547_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_576_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_596_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_1179 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_1_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_616_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1199 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_1_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_2_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_636_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1224 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_2_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_s_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_656_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1249 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_s_reg_1259 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_1_1_reg_1264 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_676_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1274 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_1_1_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_2_1_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_696_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1299 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_4_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_2_1_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_3_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_716_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1324 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_5_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_3_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_1_2_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_6_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_1_2_reg_1354 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv268_2_2_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_7_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul273_2_2_reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_8_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1379 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_sign_reg_1384 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_6_fu_154 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln160_fu_541_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal output_pixel_fu_158 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal output_pixel_3_fu_908_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal output_pixel_1_fu_162 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal output_pixel_2_fu_166 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_496_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_499_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_502_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_505_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_508_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_514_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_520_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln160_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_547_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_576_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_596_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_616_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_636_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_656_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_676_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_696_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_716_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln342_fu_755_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_759_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_fu_747_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln317_fu_773_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln317_fu_777_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_783_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_fu_797_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_fu_801_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln18_1_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_769_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_fu_813_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal lshr_ln18_fu_817_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal shl_ln18_fu_823_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_9_fu_829_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_839_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_fu_862_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_872_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_fu_868_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal result_3_fu_880_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_888_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln175_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln176_fu_904_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_s_fu_547_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_547_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_547_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_576_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_576_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_576_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_596_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_596_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_596_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_616_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_616_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_616_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_636_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_636_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_636_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_656_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_656_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_656_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_676_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_676_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_676_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_696_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_696_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_696_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_716_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_716_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_716_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_kernel_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_kernel_uitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_kernel_sparsemux_7_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component filter_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U71 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1184,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U72 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_1204,
        din1 => mul273_1_reg_1209,
        ce => ap_const_logic_1,
        dout => grp_fu_424_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U73 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_reg_1229,
        din1 => mul273_2_reg_1234,
        ce => ap_const_logic_1,
        dout => grp_fu_428_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U74 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_2_reg_1254,
        din1 => mul273_s_reg_1259,
        ce => ap_const_logic_1,
        dout => grp_fu_432_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U75 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_3_reg_1279,
        din1 => mul273_1_1_reg_1284,
        ce => ap_const_logic_1,
        dout => grp_fu_436_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U76 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_reg_1304,
        din1 => mul273_2_1_reg_1309,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U77 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_5_reg_1329,
        din1 => mul273_3_reg_1334,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U78 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_6_reg_1349,
        din1 => mul273_1_2_reg_1354,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U79 : component filter_kernel_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_reg_1364,
        din1 => mul273_2_2_reg_1369,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U80 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_1169,
        din1 => mux_case_014216_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U81 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_1_reg_1189,
        din1 => mux_case_032243_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_460_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U82 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_2_reg_1214,
        din1 => mux_case_097270_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U83 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_s_reg_1239,
        din1 => mux_case_116225_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_468_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U84 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_1_1_reg_1264,
        din1 => mux_case_134252_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U85 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_2_1_reg_1289,
        din1 => mux_case_199279_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_476_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U86 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_3_reg_1314,
        din1 => mux_case_218234_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_480_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U87 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_1_2_reg_1339,
        din1 => mux_case_236261_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_484_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U88 : component filter_kernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv268_2_2_reg_1359,
        din1 => mux_case_2101288_reload,
        ce => ap_const_logic_1,
        dout => grp_fu_488_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U89 : component filter_kernel_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_8_reg_1374,
        din1 => filter_divisor,
        ce => ap_const_logic_1,
        dout => grp_fu_492_p2);

    uitofp_32ns_32_4_no_dsp_1_U90 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_496_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_496_p1);

    uitofp_32ns_32_4_no_dsp_1_U91 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_499_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_499_p1);

    uitofp_32ns_32_4_no_dsp_1_U92 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_502_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_502_p1);

    uitofp_32ns_32_4_no_dsp_1_U93 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_505_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_505_p1);

    uitofp_32ns_32_4_no_dsp_1_U94 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_508_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_508_p1);

    uitofp_32ns_32_4_no_dsp_1_U95 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_511_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p1);

    uitofp_32ns_32_4_no_dsp_1_U96 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_514_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_514_p1);

    uitofp_32ns_32_4_no_dsp_1_U97 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_517_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p1);

    uitofp_32ns_32_4_no_dsp_1_U98 : component filter_kernel_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_520_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_520_p1);

    sparsemux_7_2_8_1_1_U99 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_load,
        din1 => window_1_load,
        din2 => window_2_load,
        def => tmp_s_fu_547_p7,
        sel => ap_sig_allocacmp_k,
        dout => tmp_s_fu_547_p9);

    sparsemux_7_2_8_1_1_U100 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_3_load_1,
        din1 => window_4_load_1,
        din2 => window_5_load_1,
        def => tmp_3_fu_576_p7,
        sel => k_reg_1138_pp0_iter3_reg,
        dout => tmp_3_fu_576_p9);

    sparsemux_7_2_8_1_1_U101 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_6_load_1,
        din1 => window_7_load_1,
        din2 => window_8_load_1,
        def => tmp_6_fu_596_p7,
        sel => k_reg_1138_pp0_iter7_reg,
        dout => tmp_6_fu_596_p9);

    sparsemux_7_2_8_1_1_U102 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_9_load,
        din1 => window_10_load,
        din2 => window_11_load,
        def => tmp_1_fu_616_p7,
        sel => k_reg_1138_pp0_iter11_reg,
        dout => tmp_1_fu_616_p9);

    sparsemux_7_2_8_1_1_U103 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_12_load_2,
        din1 => window_13_load_2,
        din2 => window_14_load_2,
        def => tmp_4_fu_636_p7,
        sel => k_reg_1138_pp0_iter15_reg,
        dout => tmp_4_fu_636_p9);

    sparsemux_7_2_8_1_1_U104 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_15_load_1,
        din1 => window_16_load_1,
        din2 => window_17_load_1,
        def => tmp_7_fu_656_p7,
        sel => k_reg_1138_pp0_iter19_reg,
        dout => tmp_7_fu_656_p9);

    sparsemux_7_2_8_1_1_U105 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_18_load,
        din1 => window_19_load,
        din2 => window_20_load,
        def => tmp_2_fu_676_p7,
        sel => k_reg_1138_pp0_iter23_reg,
        dout => tmp_2_fu_676_p9);

    sparsemux_7_2_8_1_1_U106 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_21_load_1,
        din1 => window_22_load_1,
        din2 => window_23_load_1,
        def => tmp_5_fu_696_p7,
        sel => k_reg_1138_pp0_iter27_reg,
        dout => tmp_5_fu_696_p9);

    sparsemux_7_2_8_1_1_U107 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => window_24_load_1,
        din1 => window_25_load_1,
        din2 => window_26_load_1,
        def => tmp_8_fu_716_p7,
        sel => k_reg_1138_pp0_iter31_reg,
        dout => tmp_8_fu_716_p9);

    flow_control_loop_pipe_sequential_init_U : component filter_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter57_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    k_6_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln160_fu_535_p2 = ap_const_lv1_1))) then 
                    k_6_fu_154 <= add_ln160_fu_541_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_6_fu_154 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv268_1_1_reg_1264 <= grp_fu_508_p1;
                conv268_1_2_reg_1339 <= grp_fu_517_p1;
                conv268_1_reg_1189 <= grp_fu_499_p1;
                conv268_2_1_reg_1289 <= grp_fu_511_p1;
                conv268_2_2_reg_1359 <= grp_fu_520_p1;
                conv268_2_reg_1214 <= grp_fu_502_p1;
                conv268_3_reg_1314 <= grp_fu_514_p1;
                conv268_s_reg_1239 <= grp_fu_505_p1;
                conv_reg_1169 <= grp_fu_496_p1;
                dc_reg_1379 <= grp_fu_492_p2;
                icmp_ln160_reg_1150_pp0_iter10_reg <= icmp_ln160_reg_1150_pp0_iter9_reg;
                icmp_ln160_reg_1150_pp0_iter11_reg <= icmp_ln160_reg_1150_pp0_iter10_reg;
                icmp_ln160_reg_1150_pp0_iter12_reg <= icmp_ln160_reg_1150_pp0_iter11_reg;
                icmp_ln160_reg_1150_pp0_iter13_reg <= icmp_ln160_reg_1150_pp0_iter12_reg;
                icmp_ln160_reg_1150_pp0_iter14_reg <= icmp_ln160_reg_1150_pp0_iter13_reg;
                icmp_ln160_reg_1150_pp0_iter15_reg <= icmp_ln160_reg_1150_pp0_iter14_reg;
                icmp_ln160_reg_1150_pp0_iter16_reg <= icmp_ln160_reg_1150_pp0_iter15_reg;
                icmp_ln160_reg_1150_pp0_iter17_reg <= icmp_ln160_reg_1150_pp0_iter16_reg;
                icmp_ln160_reg_1150_pp0_iter18_reg <= icmp_ln160_reg_1150_pp0_iter17_reg;
                icmp_ln160_reg_1150_pp0_iter19_reg <= icmp_ln160_reg_1150_pp0_iter18_reg;
                icmp_ln160_reg_1150_pp0_iter20_reg <= icmp_ln160_reg_1150_pp0_iter19_reg;
                icmp_ln160_reg_1150_pp0_iter21_reg <= icmp_ln160_reg_1150_pp0_iter20_reg;
                icmp_ln160_reg_1150_pp0_iter22_reg <= icmp_ln160_reg_1150_pp0_iter21_reg;
                icmp_ln160_reg_1150_pp0_iter23_reg <= icmp_ln160_reg_1150_pp0_iter22_reg;
                icmp_ln160_reg_1150_pp0_iter24_reg <= icmp_ln160_reg_1150_pp0_iter23_reg;
                icmp_ln160_reg_1150_pp0_iter25_reg <= icmp_ln160_reg_1150_pp0_iter24_reg;
                icmp_ln160_reg_1150_pp0_iter26_reg <= icmp_ln160_reg_1150_pp0_iter25_reg;
                icmp_ln160_reg_1150_pp0_iter27_reg <= icmp_ln160_reg_1150_pp0_iter26_reg;
                icmp_ln160_reg_1150_pp0_iter28_reg <= icmp_ln160_reg_1150_pp0_iter27_reg;
                icmp_ln160_reg_1150_pp0_iter29_reg <= icmp_ln160_reg_1150_pp0_iter28_reg;
                icmp_ln160_reg_1150_pp0_iter2_reg <= icmp_ln160_reg_1150_pp0_iter1_reg;
                icmp_ln160_reg_1150_pp0_iter30_reg <= icmp_ln160_reg_1150_pp0_iter29_reg;
                icmp_ln160_reg_1150_pp0_iter31_reg <= icmp_ln160_reg_1150_pp0_iter30_reg;
                icmp_ln160_reg_1150_pp0_iter32_reg <= icmp_ln160_reg_1150_pp0_iter31_reg;
                icmp_ln160_reg_1150_pp0_iter33_reg <= icmp_ln160_reg_1150_pp0_iter32_reg;
                icmp_ln160_reg_1150_pp0_iter34_reg <= icmp_ln160_reg_1150_pp0_iter33_reg;
                icmp_ln160_reg_1150_pp0_iter35_reg <= icmp_ln160_reg_1150_pp0_iter34_reg;
                icmp_ln160_reg_1150_pp0_iter36_reg <= icmp_ln160_reg_1150_pp0_iter35_reg;
                icmp_ln160_reg_1150_pp0_iter37_reg <= icmp_ln160_reg_1150_pp0_iter36_reg;
                icmp_ln160_reg_1150_pp0_iter38_reg <= icmp_ln160_reg_1150_pp0_iter37_reg;
                icmp_ln160_reg_1150_pp0_iter39_reg <= icmp_ln160_reg_1150_pp0_iter38_reg;
                icmp_ln160_reg_1150_pp0_iter3_reg <= icmp_ln160_reg_1150_pp0_iter2_reg;
                icmp_ln160_reg_1150_pp0_iter40_reg <= icmp_ln160_reg_1150_pp0_iter39_reg;
                icmp_ln160_reg_1150_pp0_iter41_reg <= icmp_ln160_reg_1150_pp0_iter40_reg;
                icmp_ln160_reg_1150_pp0_iter42_reg <= icmp_ln160_reg_1150_pp0_iter41_reg;
                icmp_ln160_reg_1150_pp0_iter43_reg <= icmp_ln160_reg_1150_pp0_iter42_reg;
                icmp_ln160_reg_1150_pp0_iter44_reg <= icmp_ln160_reg_1150_pp0_iter43_reg;
                icmp_ln160_reg_1150_pp0_iter45_reg <= icmp_ln160_reg_1150_pp0_iter44_reg;
                icmp_ln160_reg_1150_pp0_iter46_reg <= icmp_ln160_reg_1150_pp0_iter45_reg;
                icmp_ln160_reg_1150_pp0_iter47_reg <= icmp_ln160_reg_1150_pp0_iter46_reg;
                icmp_ln160_reg_1150_pp0_iter48_reg <= icmp_ln160_reg_1150_pp0_iter47_reg;
                icmp_ln160_reg_1150_pp0_iter49_reg <= icmp_ln160_reg_1150_pp0_iter48_reg;
                icmp_ln160_reg_1150_pp0_iter4_reg <= icmp_ln160_reg_1150_pp0_iter3_reg;
                icmp_ln160_reg_1150_pp0_iter50_reg <= icmp_ln160_reg_1150_pp0_iter49_reg;
                icmp_ln160_reg_1150_pp0_iter51_reg <= icmp_ln160_reg_1150_pp0_iter50_reg;
                icmp_ln160_reg_1150_pp0_iter52_reg <= icmp_ln160_reg_1150_pp0_iter51_reg;
                icmp_ln160_reg_1150_pp0_iter53_reg <= icmp_ln160_reg_1150_pp0_iter52_reg;
                icmp_ln160_reg_1150_pp0_iter54_reg <= icmp_ln160_reg_1150_pp0_iter53_reg;
                icmp_ln160_reg_1150_pp0_iter55_reg <= icmp_ln160_reg_1150_pp0_iter54_reg;
                icmp_ln160_reg_1150_pp0_iter56_reg <= icmp_ln160_reg_1150_pp0_iter55_reg;
                icmp_ln160_reg_1150_pp0_iter5_reg <= icmp_ln160_reg_1150_pp0_iter4_reg;
                icmp_ln160_reg_1150_pp0_iter6_reg <= icmp_ln160_reg_1150_pp0_iter5_reg;
                icmp_ln160_reg_1150_pp0_iter7_reg <= icmp_ln160_reg_1150_pp0_iter6_reg;
                icmp_ln160_reg_1150_pp0_iter8_reg <= icmp_ln160_reg_1150_pp0_iter7_reg;
                icmp_ln160_reg_1150_pp0_iter9_reg <= icmp_ln160_reg_1150_pp0_iter8_reg;
                k_reg_1138_pp0_iter10_reg <= k_reg_1138_pp0_iter9_reg;
                k_reg_1138_pp0_iter11_reg <= k_reg_1138_pp0_iter10_reg;
                k_reg_1138_pp0_iter12_reg <= k_reg_1138_pp0_iter11_reg;
                k_reg_1138_pp0_iter13_reg <= k_reg_1138_pp0_iter12_reg;
                k_reg_1138_pp0_iter14_reg <= k_reg_1138_pp0_iter13_reg;
                k_reg_1138_pp0_iter15_reg <= k_reg_1138_pp0_iter14_reg;
                k_reg_1138_pp0_iter16_reg <= k_reg_1138_pp0_iter15_reg;
                k_reg_1138_pp0_iter17_reg <= k_reg_1138_pp0_iter16_reg;
                k_reg_1138_pp0_iter18_reg <= k_reg_1138_pp0_iter17_reg;
                k_reg_1138_pp0_iter19_reg <= k_reg_1138_pp0_iter18_reg;
                k_reg_1138_pp0_iter20_reg <= k_reg_1138_pp0_iter19_reg;
                k_reg_1138_pp0_iter21_reg <= k_reg_1138_pp0_iter20_reg;
                k_reg_1138_pp0_iter22_reg <= k_reg_1138_pp0_iter21_reg;
                k_reg_1138_pp0_iter23_reg <= k_reg_1138_pp0_iter22_reg;
                k_reg_1138_pp0_iter24_reg <= k_reg_1138_pp0_iter23_reg;
                k_reg_1138_pp0_iter25_reg <= k_reg_1138_pp0_iter24_reg;
                k_reg_1138_pp0_iter26_reg <= k_reg_1138_pp0_iter25_reg;
                k_reg_1138_pp0_iter27_reg <= k_reg_1138_pp0_iter26_reg;
                k_reg_1138_pp0_iter28_reg <= k_reg_1138_pp0_iter27_reg;
                k_reg_1138_pp0_iter29_reg <= k_reg_1138_pp0_iter28_reg;
                k_reg_1138_pp0_iter2_reg <= k_reg_1138_pp0_iter1_reg;
                k_reg_1138_pp0_iter30_reg <= k_reg_1138_pp0_iter29_reg;
                k_reg_1138_pp0_iter31_reg <= k_reg_1138_pp0_iter30_reg;
                k_reg_1138_pp0_iter32_reg <= k_reg_1138_pp0_iter31_reg;
                k_reg_1138_pp0_iter33_reg <= k_reg_1138_pp0_iter32_reg;
                k_reg_1138_pp0_iter34_reg <= k_reg_1138_pp0_iter33_reg;
                k_reg_1138_pp0_iter35_reg <= k_reg_1138_pp0_iter34_reg;
                k_reg_1138_pp0_iter36_reg <= k_reg_1138_pp0_iter35_reg;
                k_reg_1138_pp0_iter37_reg <= k_reg_1138_pp0_iter36_reg;
                k_reg_1138_pp0_iter38_reg <= k_reg_1138_pp0_iter37_reg;
                k_reg_1138_pp0_iter39_reg <= k_reg_1138_pp0_iter38_reg;
                k_reg_1138_pp0_iter3_reg <= k_reg_1138_pp0_iter2_reg;
                k_reg_1138_pp0_iter40_reg <= k_reg_1138_pp0_iter39_reg;
                k_reg_1138_pp0_iter41_reg <= k_reg_1138_pp0_iter40_reg;
                k_reg_1138_pp0_iter42_reg <= k_reg_1138_pp0_iter41_reg;
                k_reg_1138_pp0_iter43_reg <= k_reg_1138_pp0_iter42_reg;
                k_reg_1138_pp0_iter44_reg <= k_reg_1138_pp0_iter43_reg;
                k_reg_1138_pp0_iter45_reg <= k_reg_1138_pp0_iter44_reg;
                k_reg_1138_pp0_iter46_reg <= k_reg_1138_pp0_iter45_reg;
                k_reg_1138_pp0_iter47_reg <= k_reg_1138_pp0_iter46_reg;
                k_reg_1138_pp0_iter48_reg <= k_reg_1138_pp0_iter47_reg;
                k_reg_1138_pp0_iter49_reg <= k_reg_1138_pp0_iter48_reg;
                k_reg_1138_pp0_iter4_reg <= k_reg_1138_pp0_iter3_reg;
                k_reg_1138_pp0_iter50_reg <= k_reg_1138_pp0_iter49_reg;
                k_reg_1138_pp0_iter51_reg <= k_reg_1138_pp0_iter50_reg;
                k_reg_1138_pp0_iter52_reg <= k_reg_1138_pp0_iter51_reg;
                k_reg_1138_pp0_iter53_reg <= k_reg_1138_pp0_iter52_reg;
                k_reg_1138_pp0_iter54_reg <= k_reg_1138_pp0_iter53_reg;
                k_reg_1138_pp0_iter55_reg <= k_reg_1138_pp0_iter54_reg;
                k_reg_1138_pp0_iter56_reg <= k_reg_1138_pp0_iter55_reg;
                k_reg_1138_pp0_iter57_reg <= k_reg_1138_pp0_iter56_reg;
                k_reg_1138_pp0_iter5_reg <= k_reg_1138_pp0_iter4_reg;
                k_reg_1138_pp0_iter6_reg <= k_reg_1138_pp0_iter5_reg;
                k_reg_1138_pp0_iter7_reg <= k_reg_1138_pp0_iter6_reg;
                k_reg_1138_pp0_iter8_reg <= k_reg_1138_pp0_iter7_reg;
                k_reg_1138_pp0_iter9_reg <= k_reg_1138_pp0_iter8_reg;
                mul273_1_1_reg_1284 <= grp_fu_472_p2;
                mul273_1_2_reg_1354 <= grp_fu_484_p2;
                mul273_1_reg_1209 <= grp_fu_460_p2;
                mul273_2_1_reg_1309 <= grp_fu_476_p2;
                mul273_2_2_reg_1369 <= grp_fu_488_p2;
                mul273_2_reg_1234 <= grp_fu_464_p2;
                mul273_3_reg_1334 <= grp_fu_480_p2;
                mul273_s_reg_1259 <= grp_fu_468_p2;
                mul_reg_1184 <= grp_fu_456_p2;
                sum_1_reg_1229 <= grp_fu_424_p2;
                sum_2_reg_1254 <= grp_fu_428_p2;
                sum_3_reg_1279 <= grp_fu_432_p2;
                sum_4_reg_1304 <= grp_fu_436_p2;
                sum_5_reg_1329 <= grp_fu_440_p2;
                sum_6_reg_1349 <= grp_fu_444_p2;
                sum_7_reg_1364 <= grp_fu_448_p2;
                sum_8_reg_1374 <= grp_fu_452_p2;
                sum_reg_1204 <= grp_fu_419_p2;
                tmp_1_reg_1199 <= tmp_1_fu_616_p9;
                tmp_2_reg_1274 <= tmp_2_fu_676_p9;
                tmp_3_reg_1164 <= tmp_3_fu_576_p9;
                tmp_4_reg_1224 <= tmp_4_fu_636_p9;
                tmp_5_reg_1299 <= tmp_5_fu_696_p9;
                tmp_6_reg_1179 <= tmp_6_fu_596_p9;
                tmp_7_reg_1249 <= tmp_7_fu_656_p9;
                tmp_8_reg_1324 <= tmp_8_fu_716_p9;
                val_reg_1389 <= val_fu_849_p3;
                xs_sign_reg_1384 <= data_fu_736_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln160_reg_1150 <= icmp_ln160_fu_535_p2;
                icmp_ln160_reg_1150_pp0_iter1_reg <= icmp_ln160_reg_1150;
                k_reg_1138 <= ap_sig_allocacmp_k;
                k_reg_1138_pp0_iter1_reg <= k_reg_1138;
                tmp_s_reg_1154 <= tmp_s_fu_547_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter58 = ap_const_logic_1) and (k_reg_1138_pp0_iter57_reg = ap_const_lv2_1))) then
                output_pixel_1_fu_162 <= output_pixel_3_fu_908_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((k_reg_1138_pp0_iter57_reg = ap_const_lv2_1)) and not((k_reg_1138_pp0_iter57_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter58 = ap_const_logic_1))) then
                output_pixel_2_fu_166 <= output_pixel_3_fu_908_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter58 = ap_const_logic_1) and (k_reg_1138_pp0_iter57_reg = ap_const_lv2_0))) then
                output_pixel_fu_158 <= output_pixel_3_fu_908_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln160_fu_541_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k) + unsigned(ap_const_lv2_1));
    add_ln317_fu_777_p2 <= std_logic_vector(unsigned(zext_ln317_fu_773_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln160_fu_535_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln160_fu_535_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter57_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter57_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_assign_proc : process(ap_CS_fsm_pp0_stage0, k_6_fu_154, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_k <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_k <= k_6_fu_154;
        end if; 
    end process;

    data_fu_736_p1 <= dc_reg_1379;
    grp_fu_496_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1154),32));
    grp_fu_499_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1164),32));
    grp_fu_502_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_1179),32));
    grp_fu_505_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1199),32));
    grp_fu_508_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1224),32));
    grp_fu_511_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1249),32));
    grp_fu_514_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1274),32));
    grp_fu_517_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1299),32));
    grp_fu_520_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1324),32));
    icmp_ln160_fu_535_p2 <= "1" when (signed(zext_ln160_fu_531_p1) < signed(channels)) else "0";
    icmp_ln175_fu_898_p2 <= "0" when (tmp_12_fu_888_p4 = ap_const_lv23_0) else "1";
    lshr_ln18_fu_817_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_769_p1),to_integer(unsigned('0' & zext_ln18_fu_813_p1(31-1 downto 0)))));
    mantissa_fu_759_p4 <= ((ap_const_lv1_1 & trunc_ln342_fu_755_p1) & ap_const_lv1_0);
    output_pixel_1_out <= output_pixel_1_fu_162;

    output_pixel_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln160_reg_1150_pp0_iter56_reg, ap_loop_exit_ready_pp0_iter57_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter57_reg = ap_const_logic_1) and (icmp_ln160_reg_1150_pp0_iter56_reg = ap_const_lv1_0))) then 
            output_pixel_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_pixel_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_pixel_2_out <= output_pixel_2_fu_166;

    output_pixel_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln160_reg_1150_pp0_iter56_reg, ap_loop_exit_ready_pp0_iter57_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter57_reg = ap_const_logic_1) and (icmp_ln160_reg_1150_pp0_iter56_reg = ap_const_lv1_0))) then 
            output_pixel_2_out_ap_vld <= ap_const_logic_1;
        else 
            output_pixel_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_pixel_3_fu_908_p3 <= 
        ap_const_lv8_FF when (icmp_ln175_fu_898_p2(0) = '1') else 
        trunc_ln176_fu_904_p1;
    output_pixel_out <= output_pixel_fu_158;

    output_pixel_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln160_reg_1150_pp0_iter56_reg, ap_loop_exit_ready_pp0_iter57_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter57_reg = ap_const_logic_1) and (icmp_ln160_reg_1150_pp0_iter56_reg = ap_const_lv1_0))) then 
            output_pixel_out_ap_vld <= ap_const_logic_1;
        else 
            output_pixel_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_1_fu_857_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1389));
    result_2_fu_862_p3 <= 
        result_1_fu_857_p2 when (xs_sign_reg_1384(0) = '1') else 
        val_reg_1389;
    result_3_fu_880_p3 <= 
        ap_const_lv31_0 when (tmp_11_fu_872_p3(0) = '1') else 
        trunc_ln58_fu_868_p1;
    select_ln18_fu_801_p3 <= 
        sext_ln18_fu_797_p1 when (tmp_fu_783_p3(0) = '1') else 
        add_ln317_fu_777_p2;
        sext_ln18_1_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_fu_801_p3),32));

        sext_ln18_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_791_p2),9));

    shl_ln18_fu_823_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_769_p1),to_integer(unsigned('0' & zext_ln18_fu_813_p1(31-1 downto 0)))));
    sub_ln18_fu_791_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_fu_747_p3));
    tmp_10_fu_839_p4 <= shl_ln18_fu_823_p2(55 downto 24);
    tmp_11_fu_872_p3 <= result_2_fu_862_p3(31 downto 31);
    tmp_12_fu_888_p4 <= result_3_fu_880_p3(30 downto 8);
    tmp_1_fu_616_p7 <= "XXXXXXXX";
    tmp_2_fu_676_p7 <= "XXXXXXXX";
    tmp_3_fu_576_p7 <= "XXXXXXXX";
    tmp_4_fu_636_p7 <= "XXXXXXXX";
    tmp_5_fu_696_p7 <= "XXXXXXXX";
    tmp_6_fu_596_p7 <= "XXXXXXXX";
    tmp_7_fu_656_p7 <= "XXXXXXXX";
    tmp_8_fu_716_p7 <= "XXXXXXXX";
    tmp_9_fu_829_p4 <= lshr_ln18_fu_817_p2(55 downto 24);
    tmp_fu_783_p3 <= add_ln317_fu_777_p2(8 downto 8);
    tmp_s_fu_547_p7 <= "XXXXXXXX";
    trunc_ln176_fu_904_p1 <= result_3_fu_880_p3(8 - 1 downto 0);
    trunc_ln342_fu_755_p1 <= data_fu_736_p1(23 - 1 downto 0);
    trunc_ln58_fu_868_p1 <= result_2_fu_862_p3(31 - 1 downto 0);
    val_fu_849_p3 <= 
        tmp_9_fu_829_p4 when (tmp_fu_783_p3(0) = '1') else 
        tmp_10_fu_839_p4;
    xs_exp_fu_747_p3 <= data_fu_736_p1(30 downto 23);
    zext_ln15_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_759_p4),79));
    zext_ln160_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k),32));
    zext_ln18_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_809_p1),79));
    zext_ln317_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_747_p3),9));
end behav;
