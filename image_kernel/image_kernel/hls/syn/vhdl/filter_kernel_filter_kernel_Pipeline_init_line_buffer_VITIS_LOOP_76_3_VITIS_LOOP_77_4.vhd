-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_kernel_filter_kernel_Pipeline_init_line_buffer_VITIS_LOOP_76_3_VITIS_LOOP_77_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    channels : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln58_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul_ln58 : IN STD_LOGIC_VECTOR (61 downto 0);
    cmp2538 : IN STD_LOGIC_VECTOR (0 downto 0);
    line_buffer_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_ce0 : OUT STD_LOGIC;
    line_buffer_we0 : OUT STD_LOGIC;
    line_buffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_1_ce0 : OUT STD_LOGIC;
    line_buffer_1_we0 : OUT STD_LOGIC;
    line_buffer_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_2_ce0 : OUT STD_LOGIC;
    line_buffer_2_we0 : OUT STD_LOGIC;
    line_buffer_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_3_ce0 : OUT STD_LOGIC;
    line_buffer_3_we0 : OUT STD_LOGIC;
    line_buffer_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_4_ce0 : OUT STD_LOGIC;
    line_buffer_4_we0 : OUT STD_LOGIC;
    line_buffer_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_5_ce0 : OUT STD_LOGIC;
    line_buffer_5_we0 : OUT STD_LOGIC;
    line_buffer_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_6_ce0 : OUT STD_LOGIC;
    line_buffer_6_we0 : OUT STD_LOGIC;
    line_buffer_6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_7_ce0 : OUT STD_LOGIC;
    line_buffer_7_we0 : OUT STD_LOGIC;
    line_buffer_7_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_8_ce0 : OUT STD_LOGIC;
    line_buffer_8_we0 : OUT STD_LOGIC;
    line_buffer_8_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of filter_kernel_filter_kernel_Pipeline_init_line_buffer_VITIS_LOOP_76_3_VITIS_LOOP_77_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln75_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln58_cast_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln58_cast_reg_465 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln75_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_3_fu_292_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln75_3_reg_481 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_62 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln77_fu_399_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_66 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln76_1_fu_378_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_fu_70 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal select_ln76_2_fu_306_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal indvar_flatten45_fu_78 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln75_1_fu_272_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_4_we0_local : STD_LOGIC;
    signal select_ln76_fu_370_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal line_buffer_4_ce0_local : STD_LOGIC;
    signal line_buffer_3_we0_local : STD_LOGIC;
    signal line_buffer_3_ce0_local : STD_LOGIC;
    signal line_buffer_5_we0_local : STD_LOGIC;
    signal line_buffer_5_ce0_local : STD_LOGIC;
    signal line_buffer_1_we0_local : STD_LOGIC;
    signal line_buffer_1_ce0_local : STD_LOGIC;
    signal line_buffer_we0_local : STD_LOGIC;
    signal line_buffer_ce0_local : STD_LOGIC;
    signal line_buffer_2_we0_local : STD_LOGIC;
    signal line_buffer_2_ce0_local : STD_LOGIC;
    signal line_buffer_7_we0_local : STD_LOGIC;
    signal line_buffer_7_ce0_local : STD_LOGIC;
    signal line_buffer_6_we0_local : STD_LOGIC;
    signal line_buffer_6_ce0_local : STD_LOGIC;
    signal line_buffer_8_we0_local : STD_LOGIC;
    signal line_buffer_8_ce0_local : STD_LOGIC;
    signal add_ln75_fu_281_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln76_1_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln77_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_fu_344_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln75_2_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_1_fu_351_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln76_fu_364_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component filter_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv2_0;
                elsif (((icmp_ln75_fu_267_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_74 <= select_ln75_3_fu_292_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten45_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten45_fu_78 <= ap_const_lv64_0;
                elsif (((icmp_ln75_fu_267_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten45_fu_78 <= add_ln75_1_fu_272_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_70 <= ap_const_lv64_0;
                elsif (((icmp_ln75_fu_267_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_70 <= select_ln76_2_fu_306_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    j_fu_66 <= ap_const_lv31_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
                    j_fu_66 <= select_ln76_1_fu_378_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    k_fu_62 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
                    k_fu_62 <= add_ln77_fu_399_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln75_reg_470 <= icmp_ln75_fu_267_p2;
                icmp_ln76_reg_474 <= icmp_ln76_fu_287_p2;
                    mul_ln58_cast_reg_465(61 downto 0) <= mul_ln58_cast_fu_232_p1(61 downto 0);
                select_ln75_3_reg_481 <= select_ln75_3_fu_292_p3;
            end if;
        end if;
    end process;
    mul_ln58_cast_reg_465(63 downto 62) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln75_1_fu_272_p2 <= std_logic_vector(unsigned(indvar_flatten45_fu_78) + unsigned(ap_const_lv64_1));
    add_ln75_fu_281_p2 <= std_logic_vector(unsigned(i_fu_74) + unsigned(ap_const_lv2_1));
    add_ln76_1_fu_300_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_70) + unsigned(ap_const_lv64_1));
    add_ln76_fu_364_p2 <= std_logic_vector(unsigned(select_ln75_fu_344_p3) + unsigned(ap_const_lv31_1));
    add_ln77_fu_399_p2 <= std_logic_vector(unsigned(select_ln76_fu_370_p3) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln75_fu_267_p2)
    begin
        if (((icmp_ln75_fu_267_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln75_fu_267_p2 <= "1" when (indvar_flatten45_fu_78 = mul_ln58_1) else "0";
    icmp_ln76_fu_287_p2 <= "1" when (indvar_flatten_fu_70 = mul_ln58_cast_reg_465) else "0";
    icmp_ln77_fu_336_p2 <= "1" when (signed(zext_ln77_fu_332_p1) < signed(channels)) else "0";
    line_buffer_1_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_1_ce0 <= line_buffer_1_ce0_local;

    line_buffer_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_1_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_d0 <= ap_const_lv8_0;
    line_buffer_1_we0 <= line_buffer_1_we0_local;

    line_buffer_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln76_fu_370_p3 = ap_const_lv2_1) and (select_ln75_3_reg_481 = ap_const_lv2_0) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_1_we0_local <= ap_const_logic_1;
        else 
            line_buffer_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_2_ce0 <= line_buffer_2_ce0_local;

    line_buffer_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_2_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_d0 <= ap_const_lv8_0;
    line_buffer_2_we0 <= line_buffer_2_we0_local;

    line_buffer_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if ((not((select_ln76_fu_370_p3 = ap_const_lv2_0)) and not((select_ln76_fu_370_p3 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln75_3_reg_481 = ap_const_lv2_0) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_2_we0_local <= ap_const_logic_1;
        else 
            line_buffer_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_3_ce0 <= line_buffer_3_ce0_local;

    line_buffer_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_3_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3_d0 <= ap_const_lv8_0;
    line_buffer_3_we0 <= line_buffer_3_we0_local;

    line_buffer_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln76_fu_370_p3 = ap_const_lv2_0) and (select_ln75_3_reg_481 = ap_const_lv2_1) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_3_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_4_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_4_ce0 <= line_buffer_4_ce0_local;

    line_buffer_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_4_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_4_d0 <= ap_const_lv8_0;
    line_buffer_4_we0 <= line_buffer_4_we0_local;

    line_buffer_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln76_fu_370_p3 = ap_const_lv2_1) and (select_ln75_3_reg_481 = ap_const_lv2_1) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_4_we0_local <= ap_const_logic_1;
        else 
            line_buffer_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_5_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_5_ce0 <= line_buffer_5_ce0_local;

    line_buffer_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_5_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_5_d0 <= ap_const_lv8_0;
    line_buffer_5_we0 <= line_buffer_5_we0_local;

    line_buffer_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if ((not((select_ln76_fu_370_p3 = ap_const_lv2_0)) and not((select_ln76_fu_370_p3 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln75_3_reg_481 = ap_const_lv2_1) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_5_we0_local <= ap_const_logic_1;
        else 
            line_buffer_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_6_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_6_ce0 <= line_buffer_6_ce0_local;

    line_buffer_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_6_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_6_d0 <= ap_const_lv8_0;
    line_buffer_6_we0 <= line_buffer_6_we0_local;

    line_buffer_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if ((not((select_ln75_3_reg_481 = ap_const_lv2_0)) and not((select_ln75_3_reg_481 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln76_fu_370_p3 = ap_const_lv2_0) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_6_we0_local <= ap_const_logic_1;
        else 
            line_buffer_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_7_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_7_ce0 <= line_buffer_7_ce0_local;

    line_buffer_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_7_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_7_d0 <= ap_const_lv8_0;
    line_buffer_7_we0 <= line_buffer_7_we0_local;

    line_buffer_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if ((not((select_ln75_3_reg_481 = ap_const_lv2_0)) and not((select_ln75_3_reg_481 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln76_fu_370_p3 = ap_const_lv2_1) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_7_we0_local <= ap_const_logic_1;
        else 
            line_buffer_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_8_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_8_ce0 <= line_buffer_8_ce0_local;

    line_buffer_8_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_8_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_8_d0 <= ap_const_lv8_0;
    line_buffer_8_we0 <= line_buffer_8_we0_local;

    line_buffer_8_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if ((not((select_ln75_3_reg_481 = ap_const_lv2_0)) and not((select_ln76_fu_370_p3 = ap_const_lv2_0)) and not((select_ln76_fu_370_p3 = ap_const_lv2_1)) and not((select_ln75_3_reg_481 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_8_we0_local <= ap_const_logic_1;
        else 
            line_buffer_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_address0 <= zext_ln76_fu_386_p1(11 - 1 downto 0);
    line_buffer_ce0 <= line_buffer_ce0_local;

    line_buffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_d0 <= ap_const_lv8_0;
    line_buffer_we0 <= line_buffer_we0_local;

    line_buffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln75_reg_470, select_ln75_3_reg_481, select_ln76_fu_370_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln76_fu_370_p3 = ap_const_lv2_0) and (select_ln75_3_reg_481 = ap_const_lv2_0) and (icmp_ln75_reg_470 = ap_const_lv1_0))) then 
            line_buffer_we0_local <= ap_const_logic_1;
        else 
            line_buffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln58_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln58),64));
    select_ln75_1_fu_351_p3 <= 
        ap_const_lv2_0 when (icmp_ln76_reg_474(0) = '1') else 
        k_fu_62;
    select_ln75_2_fu_358_p3 <= 
        cmp2538 when (icmp_ln76_reg_474(0) = '1') else 
        icmp_ln77_fu_336_p2;
    select_ln75_3_fu_292_p3 <= 
        add_ln75_fu_281_p2 when (icmp_ln76_fu_287_p2(0) = '1') else 
        i_fu_74;
    select_ln75_fu_344_p3 <= 
        ap_const_lv31_0 when (icmp_ln76_reg_474(0) = '1') else 
        j_fu_66;
    select_ln76_1_fu_378_p3 <= 
        select_ln75_fu_344_p3 when (select_ln75_2_fu_358_p3(0) = '1') else 
        add_ln76_fu_364_p2;
    select_ln76_2_fu_306_p3 <= 
        ap_const_lv64_1 when (icmp_ln76_fu_287_p2(0) = '1') else 
        add_ln76_1_fu_300_p2;
    select_ln76_fu_370_p3 <= 
        select_ln75_1_fu_351_p3 when (select_ln75_2_fu_358_p3(0) = '1') else 
        ap_const_lv2_0;
    zext_ln76_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_1_fu_378_p3),64));
    zext_ln77_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_62),32));
end behav;
