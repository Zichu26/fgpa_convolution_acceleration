// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_kernel_filter_kernel_Pipeline_init_line_buffer_VITIS_LOOP_76_3_VITIS_LOOP_77_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        channels,
        mul_ln58_1,
        mul_ln58,
        cmp2538,
        line_buffer_address0,
        line_buffer_ce0,
        line_buffer_we0,
        line_buffer_d0,
        line_buffer_1_address0,
        line_buffer_1_ce0,
        line_buffer_1_we0,
        line_buffer_1_d0,
        line_buffer_2_address0,
        line_buffer_2_ce0,
        line_buffer_2_we0,
        line_buffer_2_d0,
        line_buffer_3_address0,
        line_buffer_3_ce0,
        line_buffer_3_we0,
        line_buffer_3_d0,
        line_buffer_4_address0,
        line_buffer_4_ce0,
        line_buffer_4_we0,
        line_buffer_4_d0,
        line_buffer_5_address0,
        line_buffer_5_ce0,
        line_buffer_5_we0,
        line_buffer_5_d0,
        line_buffer_6_address0,
        line_buffer_6_ce0,
        line_buffer_6_we0,
        line_buffer_6_d0,
        line_buffer_7_address0,
        line_buffer_7_ce0,
        line_buffer_7_we0,
        line_buffer_7_d0,
        line_buffer_8_address0,
        line_buffer_8_ce0,
        line_buffer_8_we0,
        line_buffer_8_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] channels;
input  [63:0] mul_ln58_1;
input  [61:0] mul_ln58;
input  [0:0] cmp2538;
output  [10:0] line_buffer_address0;
output   line_buffer_ce0;
output   line_buffer_we0;
output  [7:0] line_buffer_d0;
output  [10:0] line_buffer_1_address0;
output   line_buffer_1_ce0;
output   line_buffer_1_we0;
output  [7:0] line_buffer_1_d0;
output  [10:0] line_buffer_2_address0;
output   line_buffer_2_ce0;
output   line_buffer_2_we0;
output  [7:0] line_buffer_2_d0;
output  [10:0] line_buffer_3_address0;
output   line_buffer_3_ce0;
output   line_buffer_3_we0;
output  [7:0] line_buffer_3_d0;
output  [10:0] line_buffer_4_address0;
output   line_buffer_4_ce0;
output   line_buffer_4_we0;
output  [7:0] line_buffer_4_d0;
output  [10:0] line_buffer_5_address0;
output   line_buffer_5_ce0;
output   line_buffer_5_we0;
output  [7:0] line_buffer_5_d0;
output  [10:0] line_buffer_6_address0;
output   line_buffer_6_ce0;
output   line_buffer_6_we0;
output  [7:0] line_buffer_6_d0;
output  [10:0] line_buffer_7_address0;
output   line_buffer_7_ce0;
output   line_buffer_7_we0;
output  [7:0] line_buffer_7_d0;
output  [10:0] line_buffer_8_address0;
output   line_buffer_8_ce0;
output   line_buffer_8_we0;
output  [7:0] line_buffer_8_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln75_fu_267_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] mul_ln58_cast_fu_232_p1;
reg   [63:0] mul_ln58_cast_reg_465;
reg   [0:0] icmp_ln75_reg_470;
wire   [0:0] icmp_ln76_fu_287_p2;
reg   [0:0] icmp_ln76_reg_474;
wire   [1:0] select_ln75_3_fu_292_p3;
reg   [1:0] select_ln75_3_reg_481;
wire   [63:0] zext_ln76_fu_386_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] k_fu_62;
wire   [1:0] add_ln77_fu_399_p2;
wire    ap_loop_init;
reg   [30:0] j_fu_66;
wire   [30:0] select_ln76_1_fu_378_p3;
reg   [63:0] indvar_flatten_fu_70;
wire   [63:0] select_ln76_2_fu_306_p3;
reg   [1:0] i_fu_74;
reg   [63:0] indvar_flatten45_fu_78;
wire   [63:0] add_ln75_1_fu_272_p2;
reg    line_buffer_4_we0_local;
wire   [1:0] select_ln76_fu_370_p3;
reg    line_buffer_4_ce0_local;
reg    line_buffer_3_we0_local;
reg    line_buffer_3_ce0_local;
reg    line_buffer_5_we0_local;
reg    line_buffer_5_ce0_local;
reg    line_buffer_1_we0_local;
reg    line_buffer_1_ce0_local;
reg    line_buffer_we0_local;
reg    line_buffer_ce0_local;
reg    line_buffer_2_we0_local;
reg    line_buffer_2_ce0_local;
reg    line_buffer_7_we0_local;
reg    line_buffer_7_ce0_local;
reg    line_buffer_6_we0_local;
reg    line_buffer_6_ce0_local;
reg    line_buffer_8_we0_local;
reg    line_buffer_8_ce0_local;
wire   [1:0] add_ln75_fu_281_p2;
wire   [63:0] add_ln76_1_fu_300_p2;
wire   [31:0] zext_ln77_fu_332_p1;
wire   [0:0] icmp_ln77_fu_336_p2;
wire   [30:0] select_ln75_fu_344_p3;
wire   [0:0] select_ln75_2_fu_358_p3;
wire   [1:0] select_ln75_1_fu_351_p3;
wire   [30:0] add_ln76_fu_364_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 k_fu_62 = 2'd0;
#0 j_fu_66 = 31'd0;
#0 indvar_flatten_fu_70 = 64'd0;
#0 i_fu_74 = 2'd0;
#0 indvar_flatten45_fu_78 = 64'd0;
#0 ap_done_reg = 1'b0;
end

filter_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 2'd0;
        end else if (((icmp_ln75_fu_267_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_74 <= select_ln75_3_fu_292_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten45_fu_78 <= 64'd0;
        end else if (((icmp_ln75_fu_267_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten45_fu_78 <= add_ln75_1_fu_272_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 64'd0;
        end else if (((icmp_ln75_fu_267_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_70 <= select_ln76_2_fu_306_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            j_fu_66 <= 31'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln75_reg_470 == 1'd0))) begin
            j_fu_66 <= select_ln76_1_fu_378_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            k_fu_62 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln75_reg_470 == 1'd0))) begin
            k_fu_62 <= add_ln77_fu_399_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln75_reg_470 <= icmp_ln75_fu_267_p2;
        icmp_ln76_reg_474 <= icmp_ln76_fu_287_p2;
        mul_ln58_cast_reg_465[61 : 0] <= mul_ln58_cast_fu_232_p1[61 : 0];
        select_ln75_3_reg_481 <= select_ln75_3_fu_292_p3;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_267_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_1_ce0_local = 1'b1;
    end else begin
        line_buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln76_fu_370_p3 == 2'd1) & (select_ln75_3_reg_481 == 2'd0) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_1_we0_local = 1'b1;
    end else begin
        line_buffer_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_2_ce0_local = 1'b1;
    end else begin
        line_buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln76_fu_370_p3 == 2'd0) & ~(select_ln76_fu_370_p3 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln75_3_reg_481 == 2'd0) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_2_we0_local = 1'b1;
    end else begin
        line_buffer_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_3_ce0_local = 1'b1;
    end else begin
        line_buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln76_fu_370_p3 == 2'd0) & (select_ln75_3_reg_481 == 2'd1) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_3_we0_local = 1'b1;
    end else begin
        line_buffer_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_4_ce0_local = 1'b1;
    end else begin
        line_buffer_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln76_fu_370_p3 == 2'd1) & (select_ln75_3_reg_481 == 2'd1) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_4_we0_local = 1'b1;
    end else begin
        line_buffer_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_5_ce0_local = 1'b1;
    end else begin
        line_buffer_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln76_fu_370_p3 == 2'd0) & ~(select_ln76_fu_370_p3 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln75_3_reg_481 == 2'd1) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_5_we0_local = 1'b1;
    end else begin
        line_buffer_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_6_ce0_local = 1'b1;
    end else begin
        line_buffer_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln75_3_reg_481 == 2'd0) & ~(select_ln75_3_reg_481 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln76_fu_370_p3 == 2'd0) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_6_we0_local = 1'b1;
    end else begin
        line_buffer_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_7_ce0_local = 1'b1;
    end else begin
        line_buffer_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln75_3_reg_481 == 2'd0) & ~(select_ln75_3_reg_481 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln76_fu_370_p3 == 2'd1) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_7_we0_local = 1'b1;
    end else begin
        line_buffer_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_8_ce0_local = 1'b1;
    end else begin
        line_buffer_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln75_3_reg_481 == 2'd0) & ~(select_ln76_fu_370_p3 == 2'd0) & ~(select_ln76_fu_370_p3 == 2'd1) & ~(select_ln75_3_reg_481 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_8_we0_local = 1'b1;
    end else begin
        line_buffer_8_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_ce0_local = 1'b1;
    end else begin
        line_buffer_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln76_fu_370_p3 == 2'd0) & (select_ln75_3_reg_481 == 2'd0) & (icmp_ln75_reg_470 == 1'd0))) begin
        line_buffer_we0_local = 1'b1;
    end else begin
        line_buffer_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln75_1_fu_272_p2 = (indvar_flatten45_fu_78 + 64'd1);

assign add_ln75_fu_281_p2 = (i_fu_74 + 2'd1);

assign add_ln76_1_fu_300_p2 = (indvar_flatten_fu_70 + 64'd1);

assign add_ln76_fu_364_p2 = (select_ln75_fu_344_p3 + 31'd1);

assign add_ln77_fu_399_p2 = (select_ln76_fu_370_p3 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln75_fu_267_p2 = ((indvar_flatten45_fu_78 == mul_ln58_1) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_287_p2 = ((indvar_flatten_fu_70 == mul_ln58_cast_reg_465) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_336_p2 = (($signed(zext_ln77_fu_332_p1) < $signed(channels)) ? 1'b1 : 1'b0);

assign line_buffer_1_address0 = zext_ln76_fu_386_p1;

assign line_buffer_1_ce0 = line_buffer_1_ce0_local;

assign line_buffer_1_d0 = 8'd0;

assign line_buffer_1_we0 = line_buffer_1_we0_local;

assign line_buffer_2_address0 = zext_ln76_fu_386_p1;

assign line_buffer_2_ce0 = line_buffer_2_ce0_local;

assign line_buffer_2_d0 = 8'd0;

assign line_buffer_2_we0 = line_buffer_2_we0_local;

assign line_buffer_3_address0 = zext_ln76_fu_386_p1;

assign line_buffer_3_ce0 = line_buffer_3_ce0_local;

assign line_buffer_3_d0 = 8'd0;

assign line_buffer_3_we0 = line_buffer_3_we0_local;

assign line_buffer_4_address0 = zext_ln76_fu_386_p1;

assign line_buffer_4_ce0 = line_buffer_4_ce0_local;

assign line_buffer_4_d0 = 8'd0;

assign line_buffer_4_we0 = line_buffer_4_we0_local;

assign line_buffer_5_address0 = zext_ln76_fu_386_p1;

assign line_buffer_5_ce0 = line_buffer_5_ce0_local;

assign line_buffer_5_d0 = 8'd0;

assign line_buffer_5_we0 = line_buffer_5_we0_local;

assign line_buffer_6_address0 = zext_ln76_fu_386_p1;

assign line_buffer_6_ce0 = line_buffer_6_ce0_local;

assign line_buffer_6_d0 = 8'd0;

assign line_buffer_6_we0 = line_buffer_6_we0_local;

assign line_buffer_7_address0 = zext_ln76_fu_386_p1;

assign line_buffer_7_ce0 = line_buffer_7_ce0_local;

assign line_buffer_7_d0 = 8'd0;

assign line_buffer_7_we0 = line_buffer_7_we0_local;

assign line_buffer_8_address0 = zext_ln76_fu_386_p1;

assign line_buffer_8_ce0 = line_buffer_8_ce0_local;

assign line_buffer_8_d0 = 8'd0;

assign line_buffer_8_we0 = line_buffer_8_we0_local;

assign line_buffer_address0 = zext_ln76_fu_386_p1;

assign line_buffer_ce0 = line_buffer_ce0_local;

assign line_buffer_d0 = 8'd0;

assign line_buffer_we0 = line_buffer_we0_local;

assign mul_ln58_cast_fu_232_p1 = mul_ln58;

assign select_ln75_1_fu_351_p3 = ((icmp_ln76_reg_474[0:0] == 1'b1) ? 2'd0 : k_fu_62);

assign select_ln75_2_fu_358_p3 = ((icmp_ln76_reg_474[0:0] == 1'b1) ? cmp2538 : icmp_ln77_fu_336_p2);

assign select_ln75_3_fu_292_p3 = ((icmp_ln76_fu_287_p2[0:0] == 1'b1) ? add_ln75_fu_281_p2 : i_fu_74);

assign select_ln75_fu_344_p3 = ((icmp_ln76_reg_474[0:0] == 1'b1) ? 31'd0 : j_fu_66);

assign select_ln76_1_fu_378_p3 = ((select_ln75_2_fu_358_p3[0:0] == 1'b1) ? select_ln75_fu_344_p3 : add_ln76_fu_364_p2);

assign select_ln76_2_fu_306_p3 = ((icmp_ln76_fu_287_p2[0:0] == 1'b1) ? 64'd1 : add_ln76_1_fu_300_p2);

assign select_ln76_fu_370_p3 = ((select_ln75_2_fu_358_p3[0:0] == 1'b1) ? select_ln75_1_fu_351_p3 : 2'd0);

assign zext_ln76_fu_386_p1 = select_ln76_1_fu_378_p3;

assign zext_ln77_fu_332_p1 = k_fu_62;

always @ (posedge ap_clk) begin
    mul_ln58_cast_reg_465[63:62] <= 2'b00;
end

endmodule //filter_kernel_filter_kernel_Pipeline_init_line_buffer_VITIS_LOOP_76_3_VITIS_LOOP_77_4
