-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_188_18 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (4 downto 0);
    axie4_data_1 : IN STD_LOGIC_VECTOR (127 downto 0);
    output_pixel_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    output_pixel_1_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    output_pixel_2_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    sub_ln188 : IN STD_LOGIC_VECTOR (4 downto 0);
    axie4_data_3_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    axie4_data_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_188_18 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv128_lc_4 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln188_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln186_fu_152_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln186_reg_349 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln6_fu_156_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln6_reg_354 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln191_fu_176_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln191_reg_365 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln188_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal axie4_data_fu_72 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal axie4_data_3_fu_301_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add30759_fu_76 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal p_cast_fu_127_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln188_1_fu_192_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_add30759_load : STD_LOGIC_VECTOR (6 downto 0);
    signal k_8_fu_80 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln188_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_k : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln191_fu_164_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln188_fu_188_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_217_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_217_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln191_1_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln191_fu_240_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln193_fu_233_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln191_2_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln191_1_fu_259_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln191_fu_263_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln191_fu_244_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln193_fu_269_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln193_fu_250_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal cond_i208150_fu_275_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln193_fu_289_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln193_fu_295_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal cond_i179_fu_282_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_s_fu_217_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_217_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_217_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component filter_kernel_sparsemux_7_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component filter_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_7_2_8_1_1_U153 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => output_pixel_reload,
        din1 => output_pixel_1_reload,
        din2 => output_pixel_2_reload,
        def => tmp_s_fu_217_p7,
        sel => trunc_ln186_reg_349,
        dout => tmp_s_fu_217_p9);

    flow_control_loop_pipe_sequential_init_U : component filter_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add30759_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then 
                    add30759_fu_76 <= add_ln188_1_fu_192_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    add30759_fu_76 <= p_cast_fu_127_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    axie4_data_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    axie4_data_fu_72 <= axie4_data_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    axie4_data_fu_72 <= axie4_data_3_fu_301_p2;
                end if;
            end if; 
        end if;
    end process;

    k_8_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then 
                    k_8_fu_80 <= add_ln188_fu_182_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_8_fu_80 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln188_reg_370 <= icmp_ln188_fu_198_p2;
                    shl_ln6_reg_354(9 downto 3) <= shl_ln6_fu_156_p3(9 downto 3);
                    sub_ln191_reg_365(10 downto 3) <= sub_ln191_fu_176_p2(10 downto 3);
                tmp_2_reg_359 <= ap_sig_allocacmp_add30759_load(6 downto 6);
                trunc_ln186_reg_349 <= trunc_ln186_fu_152_p1;
            end if;
        end if;
    end process;
    shl_ln6_reg_354(2 downto 0) <= "000";
    sub_ln191_reg_365(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln188_1_fu_192_p2 <= std_logic_vector(unsigned(zext_ln188_fu_188_p1) + unsigned(p_cast_fu_127_p1));
    add_ln188_fu_182_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k) + unsigned(ap_const_lv5_1));
    and_ln193_fu_295_p2 <= (xor_ln193_fu_289_p2 and axie4_data_fu_72);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln188_fu_198_p2)
    begin
        if (((icmp_ln188_fu_198_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_add30759_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, add30759_fu_76, p_cast_fu_127_p1)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_add30759_load <= p_cast_fu_127_p1;
        else 
            ap_sig_allocacmp_add30759_load <= add30759_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_k_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, k_8_fu_80)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_k <= k_8_fu_80;
        end if; 
    end process;

    axie4_data_3_fu_301_p2 <= (cond_i179_fu_282_p3 or and_ln193_fu_295_p2);
    axie4_data_3_out <= (cond_i179_fu_282_p3 or and_ln193_fu_295_p2);

    axie4_data_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln188_reg_370, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln188_reg_370 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            axie4_data_3_out_ap_vld <= ap_const_logic_1;
        else 
            axie4_data_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cond_i179_fu_282_p3 <= 
        lshr_ln193_fu_269_p2 when (tmp_2_reg_359(0) = '1') else 
        shl_ln193_fu_250_p2;
    cond_i208150_fu_275_p3 <= 
        lshr_ln191_fu_263_p2 when (tmp_2_reg_359(0) = '1') else 
        shl_ln191_fu_244_p2;
    icmp_ln188_fu_198_p2 <= "1" when (add_ln188_fu_182_p2 = sub_ln188) else "0";
    lshr_ln191_fu_263_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln191_1_fu_259_p1(31-1 downto 0)))));
    lshr_ln193_fu_269_p2 <= std_logic_vector(shift_right(unsigned(zext_ln193_fu_233_p1),to_integer(unsigned('0' & zext_ln191_1_fu_259_p1(31-1 downto 0)))));
        p_cast_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty),7));

        sext_ln191_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln6_reg_354),32));

        sext_ln191_2_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln191_reg_365),32));

        sext_ln191_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln6_fu_156_p3),11));

    shl_ln191_fu_244_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln191_fu_240_p1(31-1 downto 0)))));
    shl_ln193_fu_250_p2 <= std_logic_vector(shift_left(unsigned(zext_ln193_fu_233_p1),to_integer(unsigned('0' & zext_ln191_fu_240_p1(31-1 downto 0)))));
    shl_ln6_fu_156_p3 <= (ap_sig_allocacmp_add30759_load & ap_const_lv3_0);
    sub_ln191_fu_176_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(sext_ln191_fu_164_p1));
    tmp_s_fu_217_p7 <= "XXXXXXXX";
    trunc_ln186_fu_152_p1 <= ap_sig_allocacmp_k(2 - 1 downto 0);
    xor_ln193_fu_289_p2 <= (cond_i208150_fu_275_p3 xor ap_const_lv128_lc_4);
    zext_ln188_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_fu_182_p2),7));
    zext_ln191_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln191_2_fu_256_p1),128));
    zext_ln191_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln191_1_fu_237_p1),128));
    zext_ln193_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_217_p9),128));
end behav;
