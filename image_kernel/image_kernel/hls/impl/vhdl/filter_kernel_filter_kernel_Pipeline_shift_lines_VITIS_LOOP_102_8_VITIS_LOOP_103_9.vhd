-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_kernel_filter_kernel_Pipeline_shift_lines_VITIS_LOOP_102_8_VITIS_LOOP_103_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    channels : IN STD_LOGIC_VECTOR (31 downto 0);
    bound81 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_6_ce0 : OUT STD_LOGIC;
    line_buffer_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_7_ce0 : OUT STD_LOGIC;
    line_buffer_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_8_ce0 : OUT STD_LOGIC;
    line_buffer_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_ce0 : OUT STD_LOGIC;
    line_buffer_we0 : OUT STD_LOGIC;
    line_buffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_1_ce0 : OUT STD_LOGIC;
    line_buffer_1_we0 : OUT STD_LOGIC;
    line_buffer_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_2_ce0 : OUT STD_LOGIC;
    line_buffer_2_we0 : OUT STD_LOGIC;
    line_buffer_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bound67 : IN STD_LOGIC_VECTOR (62 downto 0);
    line_buffer_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_3_ce0 : OUT STD_LOGIC;
    line_buffer_3_we0 : OUT STD_LOGIC;
    line_buffer_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_4_ce0 : OUT STD_LOGIC;
    line_buffer_4_we0 : OUT STD_LOGIC;
    line_buffer_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    line_buffer_5_ce0 : OUT STD_LOGIC;
    line_buffer_5_we0 : OUT STD_LOGIC;
    line_buffer_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of filter_kernel_filter_kernel_Pipeline_shift_lines_VITIS_LOOP_102_8_VITIS_LOOP_103_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln101_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bound67_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound67_cast_reg_702 : STD_LOGIC_VECTOR (63 downto 0);
    signal cmp253849_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp253849_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten75_load_reg_712 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln101_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_fu_447_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln102_reg_731 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal zext_ln102_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_737 : STD_LOGIC_VECTOR (63 downto 0);
    signal first_iter_2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_2_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_1_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_1_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_47_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_47_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_6_load_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_7_load_reg_829 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_8_load_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_line_buffer_3_load25_reg_255 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_line_buffer_4_load24_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_line_buffer_5_load23_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_empty_44_phi_fu_285_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln105_fu_610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_44_reg_282 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_empty_45_phi_fu_302_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_45_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_empty_46_phi_fu_319_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_46_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal k_fu_64 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln103_fu_491_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_68 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln102_2_fu_477_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten75_fu_72 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal select_ln102_3_fu_558_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_76 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln101_4_fu_534_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal indvar_flatten99_fu_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln101_fu_379_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_84 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal empty_42_fu_88 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal empty_43_fu_92 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal line_buffer_3_ce0_local : STD_LOGIC;
    signal line_buffer_3_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_3_we0_local : STD_LOGIC;
    signal line_buffer_4_ce0_local : STD_LOGIC;
    signal line_buffer_4_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_4_we0_local : STD_LOGIC;
    signal line_buffer_5_ce0_local : STD_LOGIC;
    signal line_buffer_5_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_5_we0_local : STD_LOGIC;
    signal line_buffer_6_ce0_local : STD_LOGIC;
    signal line_buffer_7_ce0_local : STD_LOGIC;
    signal line_buffer_8_ce0_local : STD_LOGIC;
    signal line_buffer_1_we0_local : STD_LOGIC;
    signal line_buffer_1_ce0_local : STD_LOGIC;
    signal line_buffer_we0_local : STD_LOGIC;
    signal line_buffer_ce0_local : STD_LOGIC;
    signal line_buffer_2_we0_local : STD_LOGIC;
    signal line_buffer_2_ce0_local : STD_LOGIC;
    signal zext_ln103_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln101_fu_424_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln103_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_fu_410_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln101_3_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_1_fu_417_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln102_fu_441_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln101_2_fu_428_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln102_fu_455_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln102_1_fu_459_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln103_1_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next76_fu_528_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln102_1_fu_553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_575_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_594_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_594_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_575_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_s_fu_575_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_575_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_575_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_594_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_594_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_594_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component filter_kernel_sparsemux_7_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component filter_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_7_2_8_1_1_U24 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255,
        din1 => ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264,
        din2 => ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273,
        def => tmp_s_fu_575_p7,
        sel => select_ln102_reg_731,
        dout => tmp_s_fu_575_p9);

    sparsemux_7_2_8_1_1_U25 : component filter_kernel_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => line_buffer_6_load_reg_824,
        din1 => line_buffer_7_load_reg_829,
        din2 => line_buffer_8_load_reg_834,
        def => tmp_9_fu_594_p7,
        sel => select_ln102_reg_731,
        dout => tmp_9_fu_594_p9);

    flow_control_loop_pipe_sequential_init_U : component filter_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_2_reg_747 = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255 <= line_buffer_3_q0;
            elsif (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_2_reg_747 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255 <= empty_fu_84;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255 <= ap_phi_reg_pp0_iter0_line_buffer_3_load25_reg_255;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_2_reg_747 = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264 <= line_buffer_4_q0;
            elsif (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_2_reg_747 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264 <= empty_42_fu_88;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264 <= ap_phi_reg_pp0_iter0_line_buffer_4_load24_reg_264;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_2_reg_747 = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273 <= line_buffer_5_q0;
            elsif (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_2_reg_747 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273 <= empty_43_fu_92;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273 <= ap_phi_reg_pp0_iter0_line_buffer_5_load23_reg_273;
            end if; 
        end if;
    end process;

    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv2_0;
                elsif (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_76 <= select_ln101_4_fu_534_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten75_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten75_fu_72 <= ap_const_lv64_0;
                elsif (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten75_fu_72 <= select_ln102_3_fu_558_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten99_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten99_fu_80 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln101_fu_374_p2 = ap_const_lv1_0))) then 
                indvar_flatten99_fu_80 <= add_ln101_fu_379_p2;
            end if; 
        end if;
    end process;

    j_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_68 <= ap_const_lv31_0;
            elsif (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                j_fu_68 <= select_ln102_2_fu_477_p3;
            end if; 
        end if;
    end process;

    k_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_fu_64 <= ap_const_lv2_0;
            elsif (((icmp_ln101_reg_717 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                k_fu_64 <= add_ln103_fu_491_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    bound67_cast_reg_702(62 downto 0) <= bound67_cast_fu_333_p1(62 downto 0);
                cmp253849_reg_707 <= cmp253849_fu_337_p2;
                cond_reg_815 <= cond_fu_541_p2;
                empty_47_reg_819 <= empty_47_fu_547_p2;
                line_buffer_6_load_reg_824 <= line_buffer_6_q0;
                line_buffer_7_load_reg_829 <= line_buffer_7_q0;
                line_buffer_8_load_reg_834 <= line_buffer_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                empty_42_fu_88 <= ap_phi_mux_empty_45_phi_fu_302_p8;
                empty_43_fu_92 <= ap_phi_mux_empty_44_phi_fu_285_p8;
                empty_fu_84 <= ap_phi_mux_empty_46_phi_fu_319_p8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                first_iter_2_reg_747 <= first_iter_2_fu_485_p2;
                icmp_ln103_1_reg_781 <= icmp_ln103_1_fu_501_p2;
                select_ln102_reg_731 <= select_ln102_fu_447_p3;
                    zext_ln102_reg_737(10 downto 0) <= zext_ln102_fu_467_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln101_reg_717 <= icmp_ln101_fu_374_p2;
                icmp_ln102_reg_721 <= icmp_ln102_fu_385_p2;
                indvar_flatten75_load_reg_712 <= indvar_flatten75_fu_72;
            end if;
        end if;
    end process;
    bound67_cast_reg_702(63) <= '0';
    zext_ln102_reg_737(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln101_fu_379_p2 <= std_logic_vector(unsigned(indvar_flatten99_fu_80) + unsigned(ap_const_lv64_1));
    add_ln102_1_fu_553_p2 <= std_logic_vector(unsigned(indvar_flatten75_load_reg_712) + unsigned(ap_const_lv64_1));
    add_ln102_fu_441_p2 <= std_logic_vector(unsigned(select_ln101_fu_410_p3) + unsigned(ap_const_lv31_1));
    add_ln103_fu_491_p2 <= std_logic_vector(unsigned(select_ln102_fu_447_p3) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln101_reg_717)
    begin
        if (((icmp_ln101_reg_717 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln101_reg_717, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln101_reg_717 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_phi_mux_empty_44_phi_fu_285_p8_assign_proc : process(icmp_ln101_reg_717, select_ln102_reg_731, cond_reg_815, ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273, select_ln105_fu_610_p3, ap_phi_reg_pp0_iter1_empty_44_reg_282)
    begin
        if ((((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_1)) or ((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0) and (select_ln102_reg_731 = ap_const_lv2_1)) or ((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0) and (select_ln102_reg_731 = ap_const_lv2_0)))) then 
            ap_phi_mux_empty_44_phi_fu_285_p8 <= ap_phi_reg_pp0_iter1_line_buffer_5_load23_reg_273;
        elsif ((not((select_ln102_reg_731 = ap_const_lv2_1)) and not((select_ln102_reg_731 = ap_const_lv2_0)) and (icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0))) then 
            ap_phi_mux_empty_44_phi_fu_285_p8 <= select_ln105_fu_610_p3;
        else 
            ap_phi_mux_empty_44_phi_fu_285_p8 <= ap_phi_reg_pp0_iter1_empty_44_reg_282;
        end if; 
    end process;


    ap_phi_mux_empty_45_phi_fu_302_p8_assign_proc : process(icmp_ln101_reg_717, select_ln102_reg_731, cond_reg_815, ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264, select_ln105_fu_610_p3, ap_phi_reg_pp0_iter1_empty_45_reg_299)
    begin
        if (((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0) and (select_ln102_reg_731 = ap_const_lv2_1))) then 
            ap_phi_mux_empty_45_phi_fu_302_p8 <= select_ln105_fu_610_p3;
        elsif (((not((select_ln102_reg_731 = ap_const_lv2_1)) and not((select_ln102_reg_731 = ap_const_lv2_0)) and (icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0)) or ((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_1)) or ((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0) and (select_ln102_reg_731 = ap_const_lv2_0)))) then 
            ap_phi_mux_empty_45_phi_fu_302_p8 <= ap_phi_reg_pp0_iter1_line_buffer_4_load24_reg_264;
        else 
            ap_phi_mux_empty_45_phi_fu_302_p8 <= ap_phi_reg_pp0_iter1_empty_45_reg_299;
        end if; 
    end process;


    ap_phi_mux_empty_46_phi_fu_319_p8_assign_proc : process(icmp_ln101_reg_717, select_ln102_reg_731, cond_reg_815, ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255, select_ln105_fu_610_p3, ap_phi_reg_pp0_iter1_empty_46_reg_316)
    begin
        if (((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0) and (select_ln102_reg_731 = ap_const_lv2_0))) then 
            ap_phi_mux_empty_46_phi_fu_319_p8 <= select_ln105_fu_610_p3;
        elsif (((not((select_ln102_reg_731 = ap_const_lv2_1)) and not((select_ln102_reg_731 = ap_const_lv2_0)) and (icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0)) or ((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_1)) or ((icmp_ln101_reg_717 = ap_const_lv1_0) and (cond_reg_815 = ap_const_lv1_0) and (select_ln102_reg_731 = ap_const_lv2_1)))) then 
            ap_phi_mux_empty_46_phi_fu_319_p8 <= ap_phi_reg_pp0_iter1_line_buffer_3_load25_reg_255;
        else 
            ap_phi_mux_empty_46_phi_fu_319_p8 <= ap_phi_reg_pp0_iter1_empty_46_reg_316;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_line_buffer_3_load25_reg_255 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_line_buffer_4_load24_reg_264 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_line_buffer_5_load23_reg_273 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter1_empty_44_reg_282 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter1_empty_45_reg_299 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter1_empty_46_reg_316 <= "XXXXXXXX";
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bound67_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound67),64));
    cmp253849_fu_337_p2 <= "1" when (signed(channels) > signed(ap_const_lv32_0)) else "0";
    cond_fu_541_p2 <= "1" when (select_ln101_4_fu_534_p3 = ap_const_lv2_0) else "0";
    empty_47_fu_547_p2 <= "1" when (select_ln101_4_fu_534_p3 = ap_const_lv2_1) else "0";
    first_iter_2_fu_485_p2 <= "1" when (select_ln102_fu_447_p3 = ap_const_lv2_0) else "0";
    icmp_ln101_fu_374_p2 <= "1" when (indvar_flatten99_fu_80 = bound81) else "0";
    icmp_ln102_fu_385_p2 <= "1" when (indvar_flatten75_fu_72 = bound67_cast_reg_702) else "0";
    icmp_ln103_1_fu_501_p2 <= "1" when (signed(zext_ln103_1_fu_497_p1) < signed(channels)) else "0";
    icmp_ln103_fu_402_p2 <= "1" when (signed(zext_ln103_fu_398_p1) < signed(channels)) else "0";
    indvars_iv_next76_fu_528_p2 <= std_logic_vector(unsigned(i_fu_76) + unsigned(ap_const_lv2_1));
    line_buffer_1_address0 <= zext_ln102_reg_737(11 - 1 downto 0);
    line_buffer_1_ce0 <= line_buffer_1_ce0_local;

    line_buffer_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_1_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_d0 <= select_ln105_fu_610_p3;
    line_buffer_1_we0 <= line_buffer_1_we0_local;

    line_buffer_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, select_ln102_reg_731, cond_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cond_reg_815 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln102_reg_731 = ap_const_lv2_1))) then 
            line_buffer_1_we0_local <= ap_const_logic_1;
        else 
            line_buffer_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_address0 <= zext_ln102_reg_737(11 - 1 downto 0);
    line_buffer_2_ce0 <= line_buffer_2_ce0_local;

    line_buffer_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_2_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_d0 <= select_ln105_fu_610_p3;
    line_buffer_2_we0 <= line_buffer_2_we0_local;

    line_buffer_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, select_ln102_reg_731, cond_reg_815)
    begin
        if ((not((select_ln102_reg_731 = ap_const_lv2_1)) and not((select_ln102_reg_731 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cond_reg_815 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_2_we0_local <= ap_const_logic_1;
        else 
            line_buffer_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3_address0 <= line_buffer_3_address0_local;

    line_buffer_3_address0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, zext_ln102_fu_467_p1, zext_ln102_reg_737, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_3_address0_local <= zext_ln102_reg_737(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            line_buffer_3_address0_local <= zext_ln102_fu_467_p1(11 - 1 downto 0);
        else 
            line_buffer_3_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    line_buffer_3_ce0 <= line_buffer_3_ce0_local;

    line_buffer_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buffer_3_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3_d0 <= ap_phi_mux_empty_46_phi_fu_319_p8;
    line_buffer_3_we0 <= line_buffer_3_we0_local;

    line_buffer_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, cmp253849_reg_707, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln103_1_reg_781)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln103_1_reg_781 = ap_const_lv1_0) and (cmp253849_reg_707 = ap_const_lv1_1))) then 
            line_buffer_3_we0_local <= ap_const_logic_1;
        else 
            line_buffer_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_4_address0 <= line_buffer_4_address0_local;

    line_buffer_4_address0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, zext_ln102_fu_467_p1, zext_ln102_reg_737, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_4_address0_local <= zext_ln102_reg_737(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            line_buffer_4_address0_local <= zext_ln102_fu_467_p1(11 - 1 downto 0);
        else 
            line_buffer_4_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    line_buffer_4_ce0 <= line_buffer_4_ce0_local;

    line_buffer_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buffer_4_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_4_d0 <= ap_phi_mux_empty_45_phi_fu_302_p8;
    line_buffer_4_we0 <= line_buffer_4_we0_local;

    line_buffer_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, cmp253849_reg_707, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln103_1_reg_781)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln103_1_reg_781 = ap_const_lv1_0) and (cmp253849_reg_707 = ap_const_lv1_1))) then 
            line_buffer_4_we0_local <= ap_const_logic_1;
        else 
            line_buffer_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_5_address0 <= line_buffer_5_address0_local;

    line_buffer_5_address0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, zext_ln102_fu_467_p1, zext_ln102_reg_737, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_5_address0_local <= zext_ln102_reg_737(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            line_buffer_5_address0_local <= zext_ln102_fu_467_p1(11 - 1 downto 0);
        else 
            line_buffer_5_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    line_buffer_5_ce0 <= line_buffer_5_ce0_local;

    line_buffer_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            line_buffer_5_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_5_d0 <= ap_phi_mux_empty_44_phi_fu_285_p8;
    line_buffer_5_we0 <= line_buffer_5_we0_local;

    line_buffer_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, cmp253849_reg_707, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln103_1_reg_781)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln103_1_reg_781 = ap_const_lv1_0) and (cmp253849_reg_707 = ap_const_lv1_1))) then 
            line_buffer_5_we0_local <= ap_const_logic_1;
        else 
            line_buffer_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_6_address0 <= zext_ln102_fu_467_p1(11 - 1 downto 0);
    line_buffer_6_ce0 <= line_buffer_6_ce0_local;

    line_buffer_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            line_buffer_6_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_7_address0 <= zext_ln102_fu_467_p1(11 - 1 downto 0);
    line_buffer_7_ce0 <= line_buffer_7_ce0_local;

    line_buffer_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            line_buffer_7_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_8_address0 <= zext_ln102_fu_467_p1(11 - 1 downto 0);
    line_buffer_8_ce0 <= line_buffer_8_ce0_local;

    line_buffer_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            line_buffer_8_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_address0 <= zext_ln102_reg_737(11 - 1 downto 0);
    line_buffer_ce0 <= line_buffer_ce0_local;

    line_buffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_ce0_local <= ap_const_logic_1;
        else 
            line_buffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_d0 <= select_ln105_fu_610_p3;
    line_buffer_we0 <= line_buffer_we0_local;

    line_buffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, select_ln102_reg_731, cond_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (cond_reg_815 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln102_reg_731 = ap_const_lv2_0))) then 
            line_buffer_we0_local <= ap_const_logic_1;
        else 
            line_buffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln101_1_fu_417_p3 <= 
        ap_const_lv2_0 when (icmp_ln102_reg_721(0) = '1') else 
        k_fu_64;
    select_ln101_2_fu_428_p3 <= 
        ap_const_lv11_0 when (icmp_ln102_reg_721(0) = '1') else 
        trunc_ln101_fu_424_p1;
    select_ln101_3_fu_435_p3 <= 
        cmp253849_reg_707 when (icmp_ln102_reg_721(0) = '1') else 
        icmp_ln103_fu_402_p2;
    select_ln101_4_fu_534_p3 <= 
        indvars_iv_next76_fu_528_p2 when (icmp_ln102_reg_721(0) = '1') else 
        i_fu_76;
    select_ln101_fu_410_p3 <= 
        ap_const_lv31_0 when (icmp_ln102_reg_721(0) = '1') else 
        j_fu_68;
    select_ln102_1_fu_459_p3 <= 
        select_ln101_2_fu_428_p3 when (select_ln101_3_fu_435_p3(0) = '1') else 
        trunc_ln102_fu_455_p1;
    select_ln102_2_fu_477_p3 <= 
        select_ln101_fu_410_p3 when (select_ln101_3_fu_435_p3(0) = '1') else 
        add_ln102_fu_441_p2;
    select_ln102_3_fu_558_p3 <= 
        ap_const_lv64_1 when (icmp_ln102_reg_721(0) = '1') else 
        add_ln102_1_fu_553_p2;
    select_ln102_fu_447_p3 <= 
        select_ln101_1_fu_417_p3 when (select_ln101_3_fu_435_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln105_fu_610_p3 <= 
        tmp_9_fu_594_p9 when (empty_47_reg_819(0) = '1') else 
        tmp_s_fu_575_p9;
    tmp_9_fu_594_p7 <= "XXXXXXXX";
    tmp_s_fu_575_p7 <= "XXXXXXXX";
    trunc_ln101_fu_424_p1 <= j_fu_68(11 - 1 downto 0);
    trunc_ln102_fu_455_p1 <= add_ln102_fu_441_p2(11 - 1 downto 0);
    zext_ln102_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln102_1_fu_459_p3),64));
    zext_ln103_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_fu_491_p2),32));
    zext_ln103_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_64),32));
end behav;
