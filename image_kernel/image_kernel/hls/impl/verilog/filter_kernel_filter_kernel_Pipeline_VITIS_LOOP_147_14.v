// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_147_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        window_14_load_1,
        window_12_load_1,
        window_13_load_1,
        channels,
        line_buffer_3_load_1,
        line_buffer_4_load_1,
        line_buffer_5_load_1,
        window_39_out,
        window_39_out_ap_vld,
        window_38_out,
        window_38_out_ap_vld,
        window_37_out,
        window_37_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] window_14_load_1;
input  [7:0] window_12_load_1;
input  [7:0] window_13_load_1;
input  [31:0] channels;
input  [7:0] line_buffer_3_load_1;
input  [7:0] line_buffer_4_load_1;
input  [7:0] line_buffer_5_load_1;
output  [7:0] window_39_out;
output   window_39_out_ap_vld;
output  [7:0] window_38_out;
output   window_38_out_ap_vld;
output  [7:0] window_37_out;
output   window_37_out_ap_vld;

reg ap_idle;
reg window_39_out_ap_vld;
reg window_38_out_ap_vld;
reg window_37_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln147_fu_156_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] k_4_fu_50;
wire   [1:0] add_ln147_fu_162_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_k;
wire   [1:0] k_load_fu_149_p1;
reg   [7:0] window_37_fu_54;
wire   [7:0] tmp_2_fu_168_p9;
reg   [7:0] window_38_fu_58;
reg   [7:0] window_39_fu_62;
wire   [31:0] zext_ln147_fu_152_p1;
wire   [7:0] tmp_2_fu_168_p7;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_84;
wire   [1:0] tmp_2_fu_168_p1;
wire   [1:0] tmp_2_fu_168_p3;
wire  signed [1:0] tmp_2_fu_168_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 k_4_fu_50 = 2'd0;
#0 window_37_fu_54 = 8'd0;
#0 window_38_fu_58 = 8'd0;
#0 window_39_fu_62 = 8'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) filter_kernel_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U51(
    .din0(line_buffer_3_load_1),
    .din1(line_buffer_4_load_1),
    .din2(line_buffer_5_load_1),
    .def(tmp_2_fu_168_p7),
    .sel(ap_sig_allocacmp_k),
    .dout(tmp_2_fu_168_p9)
);

filter_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln147_fu_156_p2 == 1'd1)) begin
            k_4_fu_50 <= add_ln147_fu_162_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_4_fu_50 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((k_load_fu_149_p1 == 2'd1) & (icmp_ln147_fu_156_p2 == 1'd1))) begin
            window_37_fu_54 <= tmp_2_fu_168_p9;
        end else if ((ap_loop_init == 1'b1)) begin
            window_37_fu_54 <= window_13_load_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((k_load_fu_149_p1 == 2'd0) & (icmp_ln147_fu_156_p2 == 1'd1))) begin
            window_38_fu_58 <= tmp_2_fu_168_p9;
        end else if ((ap_loop_init == 1'b1)) begin
            window_38_fu_58 <= window_12_load_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_84)) begin
            window_39_fu_62 <= tmp_2_fu_168_p9;
        end else if ((ap_loop_init == 1'b1)) begin
            window_39_fu_62 <= window_14_load_1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_156_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k = 2'd0;
    end else begin
        ap_sig_allocacmp_k = k_4_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln147_fu_156_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        window_37_out_ap_vld = 1'b1;
    end else begin
        window_37_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln147_fu_156_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        window_38_out_ap_vld = 1'b1;
    end else begin
        window_38_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln147_fu_156_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        window_39_out_ap_vld = 1'b1;
    end else begin
        window_39_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln147_fu_162_p2 = (ap_sig_allocacmp_k + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_84 = (~(k_load_fu_149_p1 == 2'd0) & ~(k_load_fu_149_p1 == 2'd1) & (icmp_ln147_fu_156_p2 == 1'd1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln147_fu_156_p2 = (($signed(zext_ln147_fu_152_p1) < $signed(channels)) ? 1'b1 : 1'b0);

assign k_load_fu_149_p1 = ap_sig_allocacmp_k;

assign tmp_2_fu_168_p7 = 'bx;

assign window_37_out = window_37_fu_54;

assign window_38_out = window_38_fu_58;

assign window_39_out = window_39_fu_62;

assign zext_ln147_fu_152_p1 = ap_sig_allocacmp_k;

endmodule //filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_147_14
