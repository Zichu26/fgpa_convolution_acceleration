// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_222_20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        output_axie4_data,
        input_axie4_data,
        sub_ln222,
        output_axie4_data_2_out,
        output_axie4_data_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] empty;
input  [127:0] output_axie4_data;
input  [127:0] input_axie4_data;
input  [4:0] sub_ln222;
output  [127:0] output_axie4_data_2_out;
output   output_axie4_data_2_out_ap_vld;

reg ap_idle;
reg output_axie4_data_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln222_fu_202_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] tmp_1_reg_306;
wire    ap_block_pp0_stage0_11001;
wire   [127:0] zext_ln224_fu_148_p1;
reg   [127:0] zext_ln224_reg_312;
wire   [7:0] trunc_ln224_fu_158_p1;
reg   [7:0] trunc_ln224_reg_318;
wire   [127:0] zext_ln224_1_fu_172_p1;
reg   [127:0] zext_ln224_1_reg_323;
wire   [7:0] pixel_val_fu_182_p1;
reg   [7:0] pixel_val_reg_329;
reg   [0:0] icmp_ln222_reg_334;
reg   [127:0] output_axie4_data_1_fu_56;
wire   [127:0] output_axie4_data_4_fu_273_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [4:0] k_fu_60;
wire   [4:0] k_6_fu_186_p2;
reg   [4:0] ap_sig_allocacmp_k_5;
reg   [6:0] add38353_fu_64;
wire  signed [6:0] p_cast_fu_99_p1;
wire   [6:0] add_ln222_fu_196_p2;
reg   [6:0] ap_sig_allocacmp_add38353_load;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire    ap_block_pp0_stage0_01001;
wire  signed [9:0] shl_ln5_fu_124_p3;
wire  signed [31:0] sext_ln224_1_fu_144_p1;
wire   [127:0] lshr_ln224_fu_152_p2;
wire  signed [10:0] sext_ln224_fu_132_p1;
wire   [10:0] sub_ln224_fu_162_p2;
wire  signed [31:0] sext_ln224_2_fu_168_p1;
wire   [127:0] shl_ln224_fu_176_p2;
wire   [6:0] zext_ln220_fu_192_p1;
wire   [127:0] zext_ln227_fu_226_p1;
wire   [127:0] zext_ln227_1_fu_239_p1;
wire   [127:0] lshr_ln226_fu_234_p2;
wire   [127:0] shl_ln226_fu_221_p2;
wire   [127:0] lshr_ln227_fu_242_p2;
wire   [127:0] shl_ln227_fu_229_p2;
wire   [127:0] cond_i113156_fu_247_p3;
wire   [127:0] xor_ln227_fu_261_p2;
wire   [127:0] and_ln227_fu_267_p2;
wire   [127:0] cond_i85_fu_254_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 output_axie4_data_1_fu_56 = 128'd0;
#0 k_fu_60 = 5'd0;
#0 add38353_fu_64 = 7'd0;
#0 ap_done_reg = 1'b0;
end

filter_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            add38353_fu_64 <= add_ln222_fu_196_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            add38353_fu_64 <= p_cast_fu_99_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            k_fu_60 <= k_6_fu_186_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            output_axie4_data_1_fu_56 <= output_axie4_data;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            output_axie4_data_1_fu_56 <= output_axie4_data_4_fu_273_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln222_reg_334 <= icmp_ln222_fu_202_p2;
        pixel_val_reg_329 <= pixel_val_fu_182_p1;
        tmp_1_reg_306 <= ap_sig_allocacmp_add38353_load[32'd6];
        trunc_ln224_reg_318 <= trunc_ln224_fu_158_p1;
        zext_ln224_1_reg_323[31 : 3] <= zext_ln224_1_fu_172_p1[31 : 3];
        zext_ln224_reg_312[31 : 3] <= zext_ln224_fu_148_p1[31 : 3];
    end
end

always @ (*) begin
    if (((icmp_ln222_fu_202_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_add38353_load = p_cast_fu_99_p1;
    end else begin
        ap_sig_allocacmp_add38353_load = add38353_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_5 = 5'd0;
    end else begin
        ap_sig_allocacmp_k_5 = k_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln222_reg_334 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        output_axie4_data_2_out_ap_vld = 1'b1;
    end else begin
        output_axie4_data_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln222_fu_196_p2 = ($signed(zext_ln220_fu_192_p1) + $signed(p_cast_fu_99_p1));

assign and_ln227_fu_267_p2 = (xor_ln227_fu_261_p2 & output_axie4_data_1_fu_56);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cond_i113156_fu_247_p3 = ((tmp_1_reg_306[0:0] == 1'b1) ? lshr_ln226_fu_234_p2 : shl_ln226_fu_221_p2);

assign cond_i85_fu_254_p3 = ((tmp_1_reg_306[0:0] == 1'b1) ? lshr_ln227_fu_242_p2 : shl_ln227_fu_229_p2);

assign icmp_ln222_fu_202_p2 = ((k_6_fu_186_p2 == sub_ln222) ? 1'b1 : 1'b0);

assign k_6_fu_186_p2 = (ap_sig_allocacmp_k_5 + 5'd1);

assign lshr_ln224_fu_152_p2 = input_axie4_data >> zext_ln224_fu_148_p1;

assign lshr_ln226_fu_234_p2 = 128'd255 >> zext_ln224_1_reg_323;

assign lshr_ln227_fu_242_p2 = zext_ln227_1_fu_239_p1 >> zext_ln224_1_reg_323;

assign output_axie4_data_2_out = (cond_i85_fu_254_p3 | and_ln227_fu_267_p2);

assign output_axie4_data_4_fu_273_p2 = (cond_i85_fu_254_p3 | and_ln227_fu_267_p2);

assign p_cast_fu_99_p1 = $signed(empty);

assign pixel_val_fu_182_p1 = shl_ln224_fu_176_p2[7:0];

assign sext_ln224_1_fu_144_p1 = shl_ln5_fu_124_p3;

assign sext_ln224_2_fu_168_p1 = $signed(sub_ln224_fu_162_p2);

assign sext_ln224_fu_132_p1 = shl_ln5_fu_124_p3;

assign shl_ln224_fu_176_p2 = input_axie4_data << zext_ln224_1_fu_172_p1;

assign shl_ln226_fu_221_p2 = 128'd255 << zext_ln224_reg_312;

assign shl_ln227_fu_229_p2 = zext_ln227_fu_226_p1 << zext_ln224_reg_312;

assign shl_ln5_fu_124_p3 = {{ap_sig_allocacmp_add38353_load}, {3'd0}};

assign sub_ln224_fu_162_p2 = ($signed(11'd0) - $signed(sext_ln224_fu_132_p1));

assign trunc_ln224_fu_158_p1 = lshr_ln224_fu_152_p2[7:0];

assign xor_ln227_fu_261_p2 = (cond_i113156_fu_247_p3 ^ 128'd340282366920938463463374607431768211455);

assign zext_ln220_fu_192_p1 = k_6_fu_186_p2;

assign zext_ln224_1_fu_172_p1 = $unsigned(sext_ln224_2_fu_168_p1);

assign zext_ln224_fu_148_p1 = $unsigned(sext_ln224_1_fu_144_p1);

assign zext_ln227_1_fu_239_p1 = pixel_val_reg_329;

assign zext_ln227_fu_226_p1 = trunc_ln224_reg_318;

always @ (posedge ap_clk) begin
    zext_ln224_reg_312[2:0] <= 3'b000;
    zext_ln224_reg_312[127:32] <= 96'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    zext_ln224_1_reg_323[2:0] <= 3'b000;
    zext_ln224_1_reg_323[127:32] <= 96'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_222_20
