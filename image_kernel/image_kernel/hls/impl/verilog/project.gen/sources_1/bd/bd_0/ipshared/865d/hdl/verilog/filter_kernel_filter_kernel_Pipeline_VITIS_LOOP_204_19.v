// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_204_19 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        next_axie4_data,
        remaining_channels_1,
        sub342_cast,
        output_pixel_2_reload,
        output_pixel_1_reload,
        next_axie4_data_1_out,
        next_axie4_data_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] next_axie4_data;
input  [30:0] remaining_channels_1;
input  [4:0] sub342_cast;
input  [7:0] output_pixel_2_reload;
input  [7:0] output_pixel_1_reload;
output  [127:0] next_axie4_data_1_out;
output   next_axie4_data_1_out_ap_vld;

reg ap_idle;
reg next_axie4_data_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln204_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [28:0] trunc_ln207_fu_142_p1;
reg   [28:0] trunc_ln207_reg_251;
wire   [0:0] icmp_ln208_fu_146_p2;
reg   [0:0] icmp_ln208_reg_256;
reg   [127:0] next_axie4_data_1_fu_58;
wire   [127:0] next_axie4_data_2_fu_208_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [30:0] k_fu_62;
wire   [30:0] k_8_fu_126_p2;
reg   [30:0] ap_sig_allocacmp_k_7;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] sub342_cast_cast_fu_103_p1;
wire   [31:0] zext_ln204_fu_132_p1;
wire   [31:0] channel_idx_fu_136_p2;
wire   [31:0] shl_ln_fu_160_p3;
wire   [127:0] zext_ln207_fu_167_p1;
wire   [7:0] select_ln208_fu_177_p3;
wire   [31:0] zext_ln208_fu_182_p1;
wire   [31:0] shl_ln208_fu_186_p2;
wire   [127:0] shl_ln207_fu_171_p2;
wire   [127:0] xor_ln208_fu_196_p2;
wire   [127:0] and_ln208_fu_202_p2;
wire  signed [127:0] sext_ln208_fu_192_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 next_axie4_data_1_fu_58 = 128'd0;
#0 k_fu_62 = 31'd0;
#0 ap_done_reg = 1'b0;
end

filter_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln204_fu_120_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_62 <= k_8_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_62 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            next_axie4_data_1_fu_58 <= next_axie4_data;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            next_axie4_data_1_fu_58 <= next_axie4_data_2_fu_208_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln208_reg_256 <= icmp_ln208_fu_146_p2;
        trunc_ln207_reg_251 <= trunc_ln207_fu_142_p1;
    end
end

always @ (*) begin
    if (((icmp_ln204_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_7 = 31'd0;
    end else begin
        ap_sig_allocacmp_k_7 = k_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln204_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        next_axie4_data_1_out_ap_vld = 1'b1;
    end else begin
        next_axie4_data_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln208_fu_202_p2 = (xor_ln208_fu_196_p2 & next_axie4_data_1_fu_58);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign channel_idx_fu_136_p2 = (sub342_cast_cast_fu_103_p1 + zext_ln204_fu_132_p1);

assign icmp_ln204_fu_120_p2 = ((ap_sig_allocacmp_k_7 == remaining_channels_1) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_146_p2 = ((channel_idx_fu_136_p2 == 32'd2) ? 1'b1 : 1'b0);

assign k_8_fu_126_p2 = (ap_sig_allocacmp_k_7 + 31'd1);

assign next_axie4_data_1_out = next_axie4_data_1_fu_58;

assign next_axie4_data_2_fu_208_p2 = (sext_ln208_fu_192_p1 | and_ln208_fu_202_p2);

assign select_ln208_fu_177_p3 = ((icmp_ln208_reg_256[0:0] == 1'b1) ? output_pixel_2_reload : output_pixel_1_reload);

assign sext_ln208_fu_192_p1 = $signed(shl_ln208_fu_186_p2);

assign shl_ln207_fu_171_p2 = 128'd255 << zext_ln207_fu_167_p1;

assign shl_ln208_fu_186_p2 = zext_ln208_fu_182_p1 << shl_ln_fu_160_p3;

assign shl_ln_fu_160_p3 = {{trunc_ln207_reg_251}, {3'd0}};

assign sub342_cast_cast_fu_103_p1 = sub342_cast;

assign trunc_ln207_fu_142_p1 = ap_sig_allocacmp_k_7[28:0];

assign xor_ln208_fu_196_p2 = (shl_ln207_fu_171_p2 ^ 128'd340282366920938463463374607431768211455);

assign zext_ln204_fu_132_p1 = ap_sig_allocacmp_k_7;

assign zext_ln207_fu_167_p1 = shl_ln_fu_160_p3;

assign zext_ln208_fu_182_p1 = select_ln208_fu_177_p3;

endmodule //filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_204_19
