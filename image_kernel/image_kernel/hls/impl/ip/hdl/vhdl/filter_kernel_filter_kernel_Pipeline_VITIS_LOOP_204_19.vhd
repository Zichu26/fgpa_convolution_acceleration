-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_204_19 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    next_axie4_data : IN STD_LOGIC_VECTOR (127 downto 0);
    remaining_channels_1 : IN STD_LOGIC_VECTOR (30 downto 0);
    sub342_cast : IN STD_LOGIC_VECTOR (4 downto 0);
    output_pixel_2_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    output_pixel_1_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    next_axie4_data_1_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    next_axie4_data_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_204_19 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv128_lc_4 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln204_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln207_fu_142_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln207_reg_251 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln208_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_axie4_data_1_fu_58 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal next_axie4_data_2_fu_208_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_62 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal k_8_fu_126_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_allocacmp_k_7 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub342_cast_cast_fu_103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln204_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_idx_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_160_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln207_fu_167_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln208_fu_177_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln208_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln208_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln207_fu_171_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln208_fu_196_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln208_fu_202_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln208_fu_192_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter_kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component filter_kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    k_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln204_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_62 <= k_8_fu_126_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_62 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    next_axie4_data_1_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    next_axie4_data_1_fu_58 <= next_axie4_data;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    next_axie4_data_1_fu_58 <= next_axie4_data_2_fu_208_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln208_reg_256 <= icmp_ln208_fu_146_p2;
                trunc_ln207_reg_251 <= trunc_ln207_fu_142_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln208_fu_202_p2 <= (xor_ln208_fu_196_p2 and next_axie4_data_1_fu_58);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln204_fu_120_p2)
    begin
        if (((icmp_ln204_fu_120_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_fu_62)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_7 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_k_7 <= k_fu_62;
        end if; 
    end process;

    channel_idx_fu_136_p2 <= std_logic_vector(unsigned(sub342_cast_cast_fu_103_p1) + unsigned(zext_ln204_fu_132_p1));
    icmp_ln204_fu_120_p2 <= "1" when (ap_sig_allocacmp_k_7 = remaining_channels_1) else "0";
    icmp_ln208_fu_146_p2 <= "1" when (channel_idx_fu_136_p2 = ap_const_lv32_2) else "0";
    k_8_fu_126_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_7) + unsigned(ap_const_lv31_1));
    next_axie4_data_1_out <= next_axie4_data_1_fu_58;

    next_axie4_data_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln204_fu_120_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln204_fu_120_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            next_axie4_data_1_out_ap_vld <= ap_const_logic_1;
        else 
            next_axie4_data_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    next_axie4_data_2_fu_208_p2 <= (sext_ln208_fu_192_p1 or and_ln208_fu_202_p2);
    select_ln208_fu_177_p3 <= 
        output_pixel_2_reload when (icmp_ln208_reg_256(0) = '1') else 
        output_pixel_1_reload;
        sext_ln208_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln208_fu_186_p2),128));

    shl_ln207_fu_171_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln207_fu_167_p1(31-1 downto 0)))));
    shl_ln208_fu_186_p2 <= std_logic_vector(shift_left(unsigned(zext_ln208_fu_182_p1),to_integer(unsigned('0' & shl_ln_fu_160_p3(31-1 downto 0)))));
    shl_ln_fu_160_p3 <= (trunc_ln207_reg_251 & ap_const_lv3_0);
    sub342_cast_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub342_cast),32));
    trunc_ln207_fu_142_p1 <= ap_sig_allocacmp_k_7(29 - 1 downto 0);
    xor_ln208_fu_196_p2 <= (shl_ln207_fu_171_p2 xor ap_const_lv128_lc_4);
    zext_ln204_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_7),32));
    zext_ln207_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_160_p3),128));
    zext_ln208_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_fu_177_p3),32));
end behav;
