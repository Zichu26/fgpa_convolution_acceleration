// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_188_18 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        axie4_data_1,
        output_pixel_reload,
        output_pixel_1_reload,
        output_pixel_2_reload,
        sub_ln188,
        axie4_data_3_out,
        axie4_data_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] empty;
input  [127:0] axie4_data_1;
input  [7:0] output_pixel_reload;
input  [7:0] output_pixel_1_reload;
input  [7:0] output_pixel_2_reload;
input  [4:0] sub_ln188;
output  [127:0] axie4_data_3_out;
output   axie4_data_3_out_ap_vld;

reg ap_idle;
reg axie4_data_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln188_fu_198_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln186_fu_152_p1;
reg   [1:0] trunc_ln186_reg_349;
wire  signed [9:0] shl_ln6_fu_156_p3;
reg  signed [9:0] shl_ln6_reg_354;
reg   [0:0] tmp_2_reg_359;
wire   [10:0] sub_ln191_fu_176_p2;
reg   [10:0] sub_ln191_reg_365;
reg   [0:0] icmp_ln188_reg_370;
reg   [127:0] axie4_data_fu_72;
wire   [127:0] axie4_data_3_fu_301_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [6:0] add30759_fu_76;
wire  signed [6:0] p_cast_fu_127_p1;
wire   [6:0] add_ln188_1_fu_192_p2;
reg   [6:0] ap_sig_allocacmp_add30759_load;
reg   [4:0] k_8_fu_80;
wire   [4:0] add_ln188_fu_182_p2;
reg   [4:0] ap_sig_allocacmp_k;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire    ap_block_pp0_stage0_01001;
wire  signed [10:0] sext_ln191_fu_164_p1;
wire   [6:0] zext_ln188_fu_188_p1;
wire   [7:0] tmp_s_fu_217_p7;
wire   [7:0] tmp_s_fu_217_p9;
wire  signed [31:0] sext_ln191_1_fu_237_p1;
wire   [127:0] zext_ln191_fu_240_p1;
wire   [127:0] zext_ln193_fu_233_p1;
wire  signed [31:0] sext_ln191_2_fu_256_p1;
wire   [127:0] zext_ln191_1_fu_259_p1;
wire   [127:0] lshr_ln191_fu_263_p2;
wire   [127:0] shl_ln191_fu_244_p2;
wire   [127:0] lshr_ln193_fu_269_p2;
wire   [127:0] shl_ln193_fu_250_p2;
wire   [127:0] cond_i208150_fu_275_p3;
wire   [127:0] xor_ln193_fu_289_p2;
wire   [127:0] and_ln193_fu_295_p2;
wire   [127:0] cond_i179_fu_282_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_s_fu_217_p1;
wire   [1:0] tmp_s_fu_217_p3;
wire  signed [1:0] tmp_s_fu_217_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 axie4_data_fu_72 = 128'd0;
#0 add30759_fu_76 = 7'd0;
#0 k_8_fu_80 = 5'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) filter_kernel_sparsemux_7_2_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
sparsemux_7_2_8_1_1_U153(
    .din0(output_pixel_reload),
    .din1(output_pixel_1_reload),
    .din2(output_pixel_2_reload),
    .def(tmp_s_fu_217_p7),
    .sel(trunc_ln186_reg_349),
    .dout(tmp_s_fu_217_p9)
);

filter_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            add30759_fu_76 <= add_ln188_1_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            add30759_fu_76 <= p_cast_fu_127_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            axie4_data_fu_72 <= axie4_data_1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            axie4_data_fu_72 <= axie4_data_3_fu_301_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
            k_8_fu_80 <= add_ln188_fu_182_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_8_fu_80 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln188_reg_370 <= icmp_ln188_fu_198_p2;
        shl_ln6_reg_354[9 : 3] <= shl_ln6_fu_156_p3[9 : 3];
        sub_ln191_reg_365[10 : 3] <= sub_ln191_fu_176_p2[10 : 3];
        tmp_2_reg_359 <= ap_sig_allocacmp_add30759_load[32'd6];
        trunc_ln186_reg_349 <= trunc_ln186_fu_152_p1;
    end
end

always @ (*) begin
    if (((icmp_ln188_fu_198_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_add30759_load = p_cast_fu_127_p1;
    end else begin
        ap_sig_allocacmp_add30759_load = add30759_fu_76;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k = 5'd0;
    end else begin
        ap_sig_allocacmp_k = k_8_fu_80;
    end
end

always @ (*) begin
    if (((icmp_ln188_reg_370 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        axie4_data_3_out_ap_vld = 1'b1;
    end else begin
        axie4_data_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln188_1_fu_192_p2 = ($signed(zext_ln188_fu_188_p1) + $signed(p_cast_fu_127_p1));

assign add_ln188_fu_182_p2 = (ap_sig_allocacmp_k + 5'd1);

assign and_ln193_fu_295_p2 = (xor_ln193_fu_289_p2 & axie4_data_fu_72);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign axie4_data_3_fu_301_p2 = (cond_i179_fu_282_p3 | and_ln193_fu_295_p2);

assign axie4_data_3_out = (cond_i179_fu_282_p3 | and_ln193_fu_295_p2);

assign cond_i179_fu_282_p3 = ((tmp_2_reg_359[0:0] == 1'b1) ? lshr_ln193_fu_269_p2 : shl_ln193_fu_250_p2);

assign cond_i208150_fu_275_p3 = ((tmp_2_reg_359[0:0] == 1'b1) ? lshr_ln191_fu_263_p2 : shl_ln191_fu_244_p2);

assign icmp_ln188_fu_198_p2 = ((add_ln188_fu_182_p2 == sub_ln188) ? 1'b1 : 1'b0);

assign lshr_ln191_fu_263_p2 = 128'd255 >> zext_ln191_1_fu_259_p1;

assign lshr_ln193_fu_269_p2 = zext_ln193_fu_233_p1 >> zext_ln191_1_fu_259_p1;

assign p_cast_fu_127_p1 = $signed(empty);

assign sext_ln191_1_fu_237_p1 = shl_ln6_reg_354;

assign sext_ln191_2_fu_256_p1 = $signed(sub_ln191_reg_365);

assign sext_ln191_fu_164_p1 = shl_ln6_fu_156_p3;

assign shl_ln191_fu_244_p2 = 128'd255 << zext_ln191_fu_240_p1;

assign shl_ln193_fu_250_p2 = zext_ln193_fu_233_p1 << zext_ln191_fu_240_p1;

assign shl_ln6_fu_156_p3 = {{ap_sig_allocacmp_add30759_load}, {3'd0}};

assign sub_ln191_fu_176_p2 = ($signed(11'd0) - $signed(sext_ln191_fu_164_p1));

assign tmp_s_fu_217_p7 = 'bx;

assign trunc_ln186_fu_152_p1 = ap_sig_allocacmp_k[1:0];

assign xor_ln193_fu_289_p2 = (cond_i208150_fu_275_p3 ^ 128'd340282366920938463463374607431768211455);

assign zext_ln188_fu_188_p1 = add_ln188_fu_182_p2;

assign zext_ln191_1_fu_259_p1 = $unsigned(sext_ln191_2_fu_256_p1);

assign zext_ln191_fu_240_p1 = $unsigned(sext_ln191_1_fu_237_p1);

assign zext_ln193_fu_233_p1 = tmp_s_fu_217_p9;

always @ (posedge ap_clk) begin
    shl_ln6_reg_354[2:0] <= 3'b000;
    sub_ln191_reg_365[2:0] <= 3'b000;
end

endmodule //filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_188_18
