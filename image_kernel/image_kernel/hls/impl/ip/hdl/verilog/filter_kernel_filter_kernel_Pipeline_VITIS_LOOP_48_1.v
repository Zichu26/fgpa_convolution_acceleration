// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_48_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filter_address0,
        filter_ce0,
        filter_q0,
        mux_case_2101288_out,
        mux_case_2101288_out_ap_vld,
        mux_case_199279_out,
        mux_case_199279_out_ap_vld,
        mux_case_097270_out,
        mux_case_097270_out_ap_vld,
        mux_case_236261_out,
        mux_case_236261_out_ap_vld,
        mux_case_134252_out,
        mux_case_134252_out_ap_vld,
        mux_case_032243_out,
        mux_case_032243_out_ap_vld,
        mux_case_218234_out,
        mux_case_218234_out_ap_vld,
        mux_case_116225_out,
        mux_case_116225_out_ap_vld,
        mux_case_014216_out,
        mux_case_014216_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] filter_address0;
output   filter_ce0;
input  [31:0] filter_q0;
output  [31:0] mux_case_2101288_out;
output   mux_case_2101288_out_ap_vld;
output  [31:0] mux_case_199279_out;
output   mux_case_199279_out_ap_vld;
output  [31:0] mux_case_097270_out;
output   mux_case_097270_out_ap_vld;
output  [31:0] mux_case_236261_out;
output   mux_case_236261_out_ap_vld;
output  [31:0] mux_case_134252_out;
output   mux_case_134252_out_ap_vld;
output  [31:0] mux_case_032243_out;
output   mux_case_032243_out_ap_vld;
output  [31:0] mux_case_218234_out;
output   mux_case_218234_out_ap_vld;
output  [31:0] mux_case_116225_out;
output   mux_case_116225_out_ap_vld;
output  [31:0] mux_case_014216_out;
output   mux_case_014216_out_ap_vld;

reg ap_idle;
reg mux_case_2101288_out_ap_vld;
reg mux_case_199279_out_ap_vld;
reg mux_case_097270_out_ap_vld;
reg mux_case_236261_out_ap_vld;
reg mux_case_134252_out_ap_vld;
reg mux_case_032243_out_ap_vld;
reg mux_case_218234_out_ap_vld;
reg mux_case_116225_out_ap_vld;
reg mux_case_014216_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln48_fu_206_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] i_1_reg_424;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln48_reg_428;
wire   [3:0] sub_ln53_fu_230_p2;
reg   [3:0] sub_ln53_reg_432;
wire   [2:0] trunc_ln53_fu_241_p1;
reg   [2:0] trunc_ln53_reg_437;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] zext_ln53_1_fu_236_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln53_2_fu_255_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln53_3_fu_284_p1;
wire    ap_block_pp0_stage2;
reg   [1:0] i_fu_66;
wire   [1:0] add_ln48_fu_212_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_1;
reg   [31:0] mux_case_014216_fu_70;
wire   [31:0] filter_local_fu_260_p1;
reg   [31:0] mux_case_116225_fu_74;
reg   [31:0] mux_case_218234_fu_78;
reg   [31:0] mux_case_032243_fu_82;
wire   [31:0] filter_local_1_fu_289_p1;
reg   [31:0] mux_case_134252_fu_86;
reg   [31:0] mux_case_236261_fu_90;
reg   [31:0] mux_case_097270_fu_94;
wire   [31:0] filter_local_2_fu_308_p1;
reg   [31:0] mux_case_199279_fu_98;
reg   [31:0] mux_case_2101288_fu_102;
wire    ap_block_pp0_stage0_01001;
reg    filter_ce0_local;
reg   [3:0] filter_address0_local;
wire   [3:0] p_shl_fu_222_p3;
wire   [3:0] zext_ln53_fu_218_p1;
wire   [2:0] add_ln53_fu_250_p2;
wire   [3:0] add_ln53_1_fu_279_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_66 = 2'd0;
#0 mux_case_014216_fu_70 = 32'd0;
#0 mux_case_116225_fu_74 = 32'd0;
#0 mux_case_218234_fu_78 = 32'd0;
#0 mux_case_032243_fu_82 = 32'd0;
#0 mux_case_134252_fu_86 = 32'd0;
#0 mux_case_236261_fu_90 = 32'd0;
#0 mux_case_097270_fu_94 = 32'd0;
#0 mux_case_199279_fu_98 = 32'd0;
#0 mux_case_2101288_fu_102 = 32'd0;
#0 ap_done_reg = 1'b0;
end

filter_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln48_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= add_ln48_fu_212_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_424 <= ap_sig_allocacmp_i_1;
        icmp_ln48_reg_428 <= icmp_ln48_fu_206_p2;
        sub_ln53_reg_432 <= sub_ln53_fu_230_p2;
        trunc_ln53_reg_437 <= trunc_ln53_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_428 == 1'd0) & (i_1_reg_424 == 2'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mux_case_014216_fu_70 <= filter_local_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_428 == 1'd0) & (i_1_reg_424 == 2'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mux_case_032243_fu_82 <= filter_local_1_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_1_reg_424 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_097270_fu_94 <= filter_local_2_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_428 == 1'd0) & (i_1_reg_424 == 2'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mux_case_116225_fu_74 <= filter_local_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_428 == 1'd0) & (i_1_reg_424 == 2'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mux_case_134252_fu_86 <= filter_local_1_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_1_reg_424 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_199279_fu_98 <= filter_local_2_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_1_reg_424 == 2'd1) & ~(i_1_reg_424 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_2101288_fu_102 <= filter_local_2_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_1_reg_424 == 2'd1) & ~(i_1_reg_424 == 2'd0) & (icmp_ln48_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mux_case_218234_fu_78 <= filter_local_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_1_reg_424 == 2'd1) & ~(i_1_reg_424 == 2'd0) & (icmp_ln48_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mux_case_236261_fu_90 <= filter_local_1_fu_289_p1;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_66;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        filter_address0_local = zext_ln53_3_fu_284_p1;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        filter_address0_local = zext_ln53_2_fu_255_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filter_address0_local = zext_ln53_1_fu_236_p1;
    end else begin
        filter_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        filter_ce0_local = 1'b1;
    end else begin
        filter_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_014216_out_ap_vld = 1'b1;
    end else begin
        mux_case_014216_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_032243_out_ap_vld = 1'b1;
    end else begin
        mux_case_032243_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_097270_out_ap_vld = 1'b1;
    end else begin
        mux_case_097270_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_116225_out_ap_vld = 1'b1;
    end else begin
        mux_case_116225_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_134252_out_ap_vld = 1'b1;
    end else begin
        mux_case_134252_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_199279_out_ap_vld = 1'b1;
    end else begin
        mux_case_199279_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_2101288_out_ap_vld = 1'b1;
    end else begin
        mux_case_2101288_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_218234_out_ap_vld = 1'b1;
    end else begin
        mux_case_218234_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln48_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_236261_out_ap_vld = 1'b1;
    end else begin
        mux_case_236261_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_212_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign add_ln53_1_fu_279_p2 = (sub_ln53_reg_432 + 4'd2);

assign add_ln53_fu_250_p2 = (trunc_ln53_reg_437 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign filter_address0 = filter_address0_local;

assign filter_ce0 = filter_ce0_local;

assign filter_local_1_fu_289_p1 = filter_q0;

assign filter_local_2_fu_308_p1 = filter_q0;

assign filter_local_fu_260_p1 = filter_q0;

assign icmp_ln48_fu_206_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign mux_case_014216_out = mux_case_014216_fu_70;

assign mux_case_032243_out = mux_case_032243_fu_82;

assign mux_case_097270_out = mux_case_097270_fu_94;

assign mux_case_116225_out = mux_case_116225_fu_74;

assign mux_case_134252_out = mux_case_134252_fu_86;

assign mux_case_199279_out = mux_case_199279_fu_98;

assign mux_case_2101288_out = mux_case_2101288_fu_102;

assign mux_case_218234_out = mux_case_218234_fu_78;

assign mux_case_236261_out = mux_case_236261_fu_90;

assign p_shl_fu_222_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

assign sub_ln53_fu_230_p2 = (p_shl_fu_222_p3 - zext_ln53_fu_218_p1);

assign trunc_ln53_fu_241_p1 = sub_ln53_fu_230_p2[2:0];

assign zext_ln53_1_fu_236_p1 = sub_ln53_fu_230_p2;

assign zext_ln53_2_fu_255_p1 = add_ln53_fu_250_p2;

assign zext_ln53_3_fu_284_p1 = add_ln53_1_fu_279_p2;

assign zext_ln53_fu_218_p1 = ap_sig_allocacmp_i_1;

endmodule //filter_kernel_filter_kernel_Pipeline_VITIS_LOOP_48_1
